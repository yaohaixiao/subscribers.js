{"version":3,"file":"subscribers.min.js","sources":["_subscribers.js","utils/hasOwn.js","_hasDirectSubscribersFor.js","has.js","_hasSubscribers.js","emit.js","utils/isTypedArray.js","utils/guid.js","on.js","utils/isFunction.js","_removeSubscriber.js","off.js","_removeSubscriberByToken.js","once.js","utils/isString.js","remove.js","utils/isArray.js","_removeSubscribers.js","get.js","utils/isToken.js","_getSubscriberByToken.js","_getSubscribers.js","_getAllSubscribers.js","subscribers.js","notify.js","all.js","clear.js"],"sourcesContent":["/**\r\n * 存储订阅者（主题和处理器的）私有对象\r\n * ========================================================================\r\n * @type {{}}\r\n * @private\r\n */\r\nconst _subscribers = {}\r\n\r\nexport default _subscribers\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","import _subscribers from './_subscribers'\r\nimport hasOwn from './utils/hasOwn'\r\n\r\n/**\r\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\r\n * ========================================================================\r\n * @method _hasDirectSubscribersFor\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasDirectSubscribersFor = (topic) => {\r\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\r\n}\r\n\r\nexport default _hasDirectSubscribersFor\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _hasSubscribers from './_hasSubscribers'\r\n\r\n/**\r\n * 判断是否存在包含 topic 指定的订阅者信息\r\n * ========================================================================\r\n * @method has\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\r\n * @returns {Boolean}\r\n */\r\nconst has = (topic, isDirect = true) => {\r\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\r\n}\r\n\r\nexport default has\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * 判断是否存在包含给定 topic 相关的订阅者信息\r\n * ========================================================================\r\n * @method _hasSubscribers\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasSubscribers = (topic) => {\r\n  let found = _hasDirectSubscribersFor(topic)\r\n  let position = topic.lastIndexOf('.')\r\n\r\n  while (!found && position !== -1) {\r\n    topic = topic.substring(0, position)\r\n    position = topic.lastIndexOf('.')\r\n    found = _hasDirectSubscribersFor(topic)\r\n  }\r\n\r\n  return found\r\n}\r\n\r\nexport default _hasSubscribers\r\n","import _subscribers from './_subscribers'\r\nimport has from './has'\r\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport isTypedArray from './utils/isTypedArray'\r\n\r\n/**\r\n * （异步）发布订阅主题信息\r\n * ========================================================================\r\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\r\n * ========================================================================\r\n * @method emit\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} data - （必须）数据对象\r\n * @param {Boolean} async - (可选) 是否异步发布\r\n */\r\nconst emit = (topic, data, async = true) => {\r\n  const execute = (topic) => {\r\n    if (!_hasDirectSubscribersFor(topic)) {\r\n      return false\r\n    }\r\n\r\n    _subscribers[topic].forEach((subscriber) => {\r\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\r\n      // 采用 toString() 方法转化为普通（JSON）字符串\r\n      const message = isTypedArray(data) ? data.toString() : data\r\n      subscriber.callback(message)\r\n    })\r\n  }\r\n  const deliver = () => {\r\n    let subscriber = topic\r\n    let position = topic.lastIndexOf('.')\r\n\r\n    while (position !== -1) {\r\n      subscriber = subscriber.substring(0, position)\r\n      position = subscriber.lastIndexOf('.')\r\n\r\n      execute(subscriber)\r\n    }\r\n\r\n    // 执行 topic 对应的处理器\r\n    execute(topic)\r\n    // 执行特殊 topic：'*'（监听全部消息的发布）\r\n    execute('*')\r\n  }\r\n\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (async) {\r\n    setTimeout(deliver, 10)\r\n  } else {\r\n    deliver()\r\n  }\r\n}\r\n\r\nexport default emit\r\n","/**\r\n * 判断检测数据是否为 Typed Arrays 类型的数据\r\n * ========================================================================\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nconst isTypedArray = (val) => {\r\n  const TYPES = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]',\r\n    '[object BigInt64Array]',\r\n    '[object BigUint64Array]'\r\n  ]\r\n  const toString = Object.prototype.toString\r\n\r\n  return TYPES.indexOf(toString.call(val)) > -1\r\n}\r\n\r\nexport default isTypedArray\r\n","/**\r\n * 生成唯一 id 字符串的函数\r\n * ========================================================================\r\n * @method guid\r\n * @param {String} [prefix] - 生成 id 的前缀字符串\r\n * @return {String} 返回一个表示唯一 id 的字符串\r\n */\r\nconst guid = (() => {\r\n  let id = 0\r\n\r\n  return (prefix = 'guid-') => {\r\n    id += 1\r\n\r\n    return `${prefix + id}`\r\n  }\r\n})()\r\n\r\nexport default guid\r\n","import _subscribers from './_subscribers'\r\nimport isFunction from './utils/isFunction'\r\nimport guid from './utils/guid'\r\n\r\n/**\r\n * 订阅主题，并给出处理器函数\r\n * ========================================================================\r\n * @method on\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Function} handler - （必须）主题的处理器函数\r\n * @return {String|Boolean} - 唯一的 token 字符串，例如：'guid-1'。\r\n */\r\nconst on = (topic, handler) => {\r\n  const token = guid()\r\n  let subject = typeof topic === 'symbol' ? topic.toString() : topic\r\n\r\n  if (!isFunction(handler)) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (!_subscribers[subject]) {\r\n    _subscribers[subject] = []\r\n  }\r\n\r\n  _subscribers[subject].push({\r\n    topic: subject,\r\n    callback: handler,\r\n    token\r\n  })\r\n\r\n  return token\r\n}\r\n\r\nexport default on\r\n","/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return Object.prototype.toString.apply(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","import _subscribers from './_subscribers'\r\nimport hasOwn from './utils/hasOwn'\r\n\r\n/**\r\n * 删除与给定 topic 相同的订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscriber\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _removeSubscriber = (topic) => {\r\n  if (!hasOwn(_subscribers, topic)) {\r\n    return false\r\n  }\r\n\r\n  delete _subscribers[topic]\r\n}\r\n\r\nexport default _removeSubscriber\r\n","import has from './has'\r\nimport _removeSubscriber from './_removeSubscriber'\r\nimport _removeSubscriberByToken from './_removeSubscriberByToken'\r\n\r\n/**\r\n * 取消订阅主题\r\n * ========================================================================\r\n * @method off\r\n * @param {String} topic - （必须）订阅的主题\r\n * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\r\n */\r\nconst off = (topic, token) => {\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (token) {\r\n    _removeSubscriberByToken(token)\r\n  } else {\r\n    _removeSubscriber(topic)\r\n  }\r\n}\r\n\r\nexport default off\r\n","import _subscribers from './_subscribers'\r\nimport _removeSubscriber from './_removeSubscriber'\r\n\r\n/**\r\n * 通过订阅者 token 值删除订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscriberByToken\r\n * @param {String} token - 订阅者 token 字符串\r\n * @returns {boolean}\r\n * @private\r\n */\r\nconst _removeSubscriberByToken = (token) => {\r\n  const keys = Object.keys(_subscribers)\r\n  let index = -1\r\n\r\n  if (!token || keys.length < 1) {\r\n    return false\r\n  }\r\n\r\n  keys.forEach((subject) => {\r\n    const subscriber = _subscribers[subject]\r\n    let topic\r\n\r\n    subscriber.forEach((execution, j) => {\r\n      if (execution.callback === token || execution.token === token) {\r\n        topic = execution.topic\r\n        subscriber.splice(index, j)\r\n      }\r\n    })\r\n\r\n    /* istanbul ignore else */\r\n    if (subscriber.length < 1) {\r\n      _removeSubscriber(topic)\r\n    }\r\n  })\r\n}\r\n\r\nexport default _removeSubscriberByToken\r\n","import on from './on'\r\nimport off from './off'\r\n\r\n/**\r\n * 订阅主题，并给出处理器函数，接受到消息后，仅执行一次\r\n * ========================================================================\r\n * @method once\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Function} handler - （必须）主题的处理器函数\r\n * @return {String|Boolean} - 唯一的 token 字符串，例如：'guid-1'。\r\n */\r\nconst once = (topic, handler) => {\r\n  return on(topic, function () {\r\n    off(topic, handler)\r\n    handler.apply(this, arguments)\r\n  })\r\n}\r\n\r\nexport default once\r\n","/**\r\n * 判断测试数据是否为 String 类型数据\r\n * ========================================================================\r\n * @method isString\r\n * @param {String} str - 测试数据\r\n * @return {Boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","import _removeSubscriber from './_removeSubscriber'\r\nimport _removeSubscribers from './_removeSubscribers'\r\nimport isArray from './utils/isArray'\r\nimport isString from './utils/isString'\r\n\r\n/**\r\n * 删除特定 topic 主题的订阅者信息。\r\n * ========================================================================\r\n * methods\r\n * @param {String|Array} topic\r\n */\r\nconst remove = (topic) => {\r\n  if (isArray(topic)) {\r\n    _removeSubscribers(topic)\r\n  } else {\r\n    if (isString(topic)) {\r\n      _removeSubscriber(topic)\r\n    }\r\n  }\r\n}\r\n\r\nexport default remove\r\n","/**\r\n * 检测测试数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} - 'val' 是 Array 则返回 true，否则返回 false\r\n */\r\nconst isArray = (val) => {\r\n  const toString = Object.prototype.toString\r\n  return Array.isArray\r\n    ? Array.isArray(val)\r\n    : toString.apply(val) === '[object Array]'\r\n}\r\n\r\nexport default isArray\r\n","import _subscribers from './_subscribers'\r\nimport hasOwn from './utils/hasOwn'\r\nimport has from './has'\r\n\r\n/**\r\n * 删除包含 topic 主题的订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscribers\r\n * @param {String} topic - （必须）主题名称\r\n * @returns {Boolean}\r\n */\r\nconst _removeSubscribers = (topic) => {\r\n  const keys = Object.keys\r\n\r\n  if (!has(topic) || keys.length < 1) {\r\n    return false\r\n  }\r\n\r\n  keys(_subscribers).forEach((subject) => {\r\n    if (hasOwn(_subscribers, subject) && subject.startsWith(topic)) {\r\n      delete _subscribers[subject]\r\n    }\r\n  })\r\n}\r\n\r\nexport default _removeSubscribers\r\n","import _subscribers from './_subscribers'\r\nimport isToken from './utils/isToken'\r\nimport isString from './utils/isString'\r\nimport _getAllSubscribers from './_getAllSubscribers'\r\nimport _getSubscribers from './_getSubscribers'\r\nimport _getSubscriberByToken from './_getSubscriberByToken'\r\n\r\n/**\r\n * 获取全部或者包含 topic 主题或者订阅 token 的订阅者信息\r\n * ========================================================================\r\n * @method get\r\n * @param {String} [topic] - （可选）主题名称或者订阅 token 值\r\n * @returns {Array|Object}\r\n */\r\nconst get = (topic) => {\r\n  const keys = Object.keys(_subscribers)\r\n\r\n  if (keys.length < 1) {\r\n    return []\r\n  }\r\n\r\n  if (!topic) {\r\n    return _getAllSubscribers()\r\n  } else {\r\n    if (isToken(topic)) {\r\n      return _getSubscriberByToken(topic)\r\n    } else if (isString(topic)) {\r\n      return _getSubscribers(topic)\r\n    }\r\n  }\r\n}\r\n\r\nexport default get\r\n","import isString from './isString'\r\n\r\n/**\r\n * 判断测试数据是否为订阅者的 token 字符串\r\n * ========================================================================\r\n * @method isToken\r\n * @param {String} str - 测试数据\r\n * @return {Boolean}\r\n */\r\nconst isToken = (str) => {\r\n  const pattern = /^guid-\\d+$/i\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isToken\r\n","import _subscribers from './_subscribers'\r\n\r\n/**\r\n * 获取全部的订阅者信息\r\n * ========================================================================\r\n * @method _getSubscriberByToken\r\n * @param {String} token - （必须）订阅者信息 token 字符串\r\n * @returns {{}} - 返回全部的订阅信息\r\n * @private\r\n */\r\nconst _getSubscriberByToken = (token) => {\r\n  const keys = Object.keys(_subscribers)\r\n  let targetSubscriber = null\r\n\r\n  if (keys.length < 1) {\r\n    return null\r\n  }\r\n\r\n  _subscribers.forEach((subscriber) => {\r\n    subscriber.forEach((execution) => {\r\n      if (execution.callback === token || execution.token === token) {\r\n        targetSubscriber = subscriber\r\n      }\r\n    })\r\n  })\r\n\r\n  return targetSubscriber\r\n}\r\n\r\nexport default _getSubscriberByToken\r\n","import hasOwn from './utils/hasOwn'\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * 获取与指定 topic 相关的订阅者信息\r\n * ========================================================================\r\n * @method _getSubscribers\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Array} - 返回订阅者信息集合（数组）\r\n * @private\r\n */\r\nconst _getSubscribers = (topic) => {\r\n  const keys = Object.keys(_subscribers)\r\n  let subscribers = []\r\n\r\n  if (keys.length < 1) {\r\n    return subscribers\r\n  }\r\n\r\n  keys.forEach((subject) => {\r\n    const subscriber = {}\r\n\r\n    if (hasOwn(_subscribers, subject) && subject.startsWith(topic)) {\r\n      subscriber[subject] = _subscribers[subject]\r\n      subscribers.push(subscriber)\r\n    }\r\n  })\r\n\r\n  return subscribers\r\n}\r\n\r\nexport default _getSubscribers\r\n","import _subscribers from './_subscribers'\r\n\r\n/**\r\n * 获取全部的订阅者信息\r\n * ========================================================================\r\n * @method _getAllSubscribers\r\n * @returns {{}} - 返回全部的订阅信息\r\n * @private\r\n */\r\nconst _getAllSubscribers = () => {\r\n  return _subscribers\r\n}\r\n\r\nexport default _getAllSubscribers\r\n","import emit from './emit'\r\nimport notify from './notify'\r\nimport on from './on'\r\nimport once from './once'\r\nimport all from './all'\r\nimport off from './off'\r\nimport remove from './remove'\r\nimport clear from './clear'\r\nimport get from './get'\r\nimport has from './has'\r\n\r\nconst subscribers = {\r\n  /**\r\n   * 发布订阅主题信息\r\n   * ========================================================================\r\n   * @method emit\r\n   * @see emit\r\n   * @param {String} topic - （必须）主题名称\r\n   * @param {Object} data - （必须）数据对象\r\n   * @param {Boolean} async - (可选) 是否异步发布\r\n   * @returns {subscribers}\r\n   */\r\n  emit(topic, data, async = true) {\r\n    emit(topic, data, async)\r\n\r\n    return this\r\n  },\r\n\r\n  /**\r\n   * 同步发布订阅主题信息\r\n   * ========================================================================\r\n   * @method notify\r\n   * @alias emit\r\n   * @see emit\r\n   * @param {String} topic - （必须）主题名称\r\n   * @param {Object} data - （必须）数据对象\r\n   * @returns {subscribers}\r\n   */\r\n  notify(topic, data) {\r\n    notify(topic, data)\r\n\r\n    return this\r\n  },\r\n\r\n  /**\r\n   * 订阅主题，并给出处理器函数\r\n   * ========================================================================\r\n   * @method on\r\n   * @param {String} topic - （必须）主题名称\r\n   * @param {Function} handler - （必须）主题的处理器函数\r\n   * @return {String|Boolean} -\r\n   */\r\n  on(topic, handler) {\r\n    return on(topic, handler)\r\n  },\r\n\r\n  /**\r\n   * 订阅主题，并给出处理器函数，接受到消息后，仅执行一次\r\n   * ========================================================================\r\n   * @method once\r\n   * @see once\r\n   * @param {String} topic - （必须）主题名称\r\n   * @param {Function} handler - （必须）主题的处理器函数\r\n   * @return {String|Boolean}\r\n   */\r\n  once(topic, handler) {\r\n    return once(topic, handler)\r\n  },\r\n\r\n  /**\r\n   * 订阅所有主题消息发布，任何消息发布都会执行 handler() 处理器\r\n   * ========================================================================\r\n   * @method all\r\n   * @see all\r\n   * @param {Function} handler - （必须）处理器函数\r\n   * @return {String|Boolean}\r\n   */\r\n  all(handler) {\r\n    return all(handler)\r\n  },\r\n\r\n  /**\r\n   * 取消订阅主题\r\n   * ========================================================================\r\n   * @method off\r\n   * @see off\r\n   * @param {String} topic - （必须）订阅的主题\r\n   * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\r\n   * @returns {subscribers}\r\n   */\r\n  off(topic, token) {\r\n    off(topic, token)\r\n\r\n    return this\r\n  },\r\n\r\n  /**\r\n   * 删除特定 topic 或者多个主题的订阅者信息\r\n   * ========================================================================\r\n   * @method remove\r\n   * @see _removeSubscriber\r\n   * @see _removeSubscribers\r\n   * @param {String|Array} topic - （必须）主题名称\r\n   * @returns {subscribers}\r\n   */\r\n  remove(topic) {\r\n    remove(topic)\r\n\r\n    return this\r\n  },\r\n\r\n  /**\r\n   * 清理所有订阅者（主题和处理器的）信息\r\n   * ========================================================================\r\n   * @method clear\r\n   * @see clear\r\n   * @returns {subscribers}\r\n   */\r\n  clear() {\r\n    clear()\r\n\r\n    return this\r\n  },\r\n\r\n  /**\r\n   * 获取全部或者包含 topic 主题的订阅者信息\r\n   * ========================================================================\r\n   * @method get\r\n   * @param {String} [topic] - （可选）主题名称\r\n   *                            传递 topic 参数，返回包含 topic 主题的订阅者信息\r\n   *                            不传递 topic 参数，返回全部订阅者信息\r\n   * @returns {*[]}\r\n   */\r\n  get(topic) {\r\n    return get(topic)\r\n  },\r\n\r\n  /**\r\n   * 判断是否存在包含 topic 指定的订阅者信息\r\n   * ========================================================================\r\n   * @method has\r\n   * @see _hasSubscribers\r\n   * @see _hasDirectSubscribersFor\r\n   * @param {String} topic - （必须）主题名称\r\n   * @param {Boolean} [isDirect] -（可选）是否为直接的主题，默认值：true\r\n   * @returns {Boolean}\r\n   */\r\n  has(topic, isDirect = true) {\r\n    return has(topic, isDirect)\r\n  }\r\n}\r\n\r\nexport default subscribers\r\n","import emit from './emit'\r\n\r\n/**\r\n * 同步发布订阅主题信息\r\n * ========================================================================\r\n * @method notify\r\n * @alias emit\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} data - （必须）数据对象\r\n */\r\nconst notify = (topic, data) => {\r\n  emit(topic, data, false)\r\n}\r\n\r\nexport default notify\r\n","import on from './on'\r\n\r\n/**\r\n * 订阅所有主题消息发布，任何消息发布都会执行 handler() 处理器\r\n * ========================================================================\r\n * @method all\r\n * @param {Function} handler - （必须）事件监听的处理器方法\r\n * @returns {String|Boolean}\r\n */\r\nconst all = (handler) => {\r\n  return on('*', handler)\r\n}\r\n\r\nexport default all\r\n","import _subscribers from './_subscribers'\r\n\r\n/**\r\n * 清理所有订阅者信息\r\n * ========================================================================\r\n * @method clear\r\n */\r\nconst clear = () => {\r\n  const keys = Object.keys(_subscribers)\r\n\r\n  if (keys.length < 1) {\r\n    return false\r\n  }\r\n\r\n  keys.forEach((subject) => {\r\n    delete _subscribers[subject]\r\n  })\r\n}\r\n\r\nexport default clear\r\n"],"names":["_subscribers","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","_hasDirectSubscribersFor","topic","length","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","data","async","execute","forEach","subscriber","message","val","toString","indexOf","isTypedArray","callback","deliver","setTimeout","guid","id","prefix","on","handler","token","subject","apply","push","_removeSubscriber","off","keys","execution","j","splice","_removeSubscriberByToken","once","this","arguments","isString","str","remove","Array","isArray","startsWith","_removeSubscribers","get","test","targetSubscriber","_getSubscriberByToken","subscribers","_getSubscribers","notify","all","clear"],"mappings":"4OAMA,MAAMA,EAAe,CAAA,ECEfC,EAAS,CAACC,EAAKC,KACnB,MAAMC,EAAiBC,OAAOC,UAAUF,eACxC,OAAOF,GAAOE,EAAeG,KAAKL,EAAKC,EAAI,ECAvCK,EAA4BC,GACzBR,EAAOD,EAAcS,IAAUT,EAAaS,GAAOC,OAAS,ECA/DC,EAAM,CAACF,EAAOG,GAAW,IACtBA,EAAWJ,EAAyBC,GCHrB,CAACA,IACvB,IAAII,EAAQL,EAAyBC,GACjCK,EAAWL,EAAMM,YAAY,KAEjC,MAAQF,IAAuB,IAAdC,GAEfA,GADAL,EAAQA,EAAMO,UAAU,EAAGF,IACVC,YAAY,KAC7BF,EAAQL,EAAyBC,GAGnC,OAAOI,GDP6CI,CAAgBR,GEGhES,EAAO,CAACT,EAAOU,EAAMC,GAAQ,KACjC,MAAMC,EAAWZ,IACf,IAAKD,EAAyBC,GAC5B,OAAO,EAGTT,EAAaS,GAAOa,SAASC,IAG3B,MAAMC,EClBS,CAACC,IACpB,MAaMC,EAAWrB,OAAOC,UAAUoB,SAElC,MAfc,CACZ,qBACA,sBACA,6BACA,sBACA,uBACA,sBACA,uBACA,wBACA,wBACA,yBACA,2BAIWC,QAAQD,EAASnB,KAAKkB,KAAS,GDExBG,CAAaT,GAAQA,EAAKO,WAAaP,EACvDI,EAAWM,SAASL,EAAQ,GAC5B,EAEEM,EAAU,KACd,IAAIP,EAAad,EACbK,EAAWL,EAAMM,YAAY,KAEjC,MAAqB,IAAdD,GACLS,EAAaA,EAAWP,UAAU,EAAGF,GACrCA,EAAWS,EAAWR,YAAY,KAElCM,EAAQE,GAIVF,EAAQZ,GAERY,EAAQ,IAAI,EAGd,IAAKV,EAAIF,GACP,OAAO,EAGLW,EACFW,WAAWD,EAAS,IAEpBA,GACD,EE9CGE,EAAO,MACX,IAAIC,EAAK,EAET,MAAO,CAACC,EAAS,WACfD,GAAM,EAEC,GAAGC,EAASD,IAEtB,EARY,GCKPE,EAAK,CAAC1B,EAAO2B,KACjB,MAAMC,EAAQL,IACd,IAAIM,EAA2B,iBAAV7B,EAAqBA,EAAMiB,WAAajB,EAE7D,OCTkBgB,EDSFW,ECRgC,sBAAzC/B,OAAOC,UAAUoB,SAASa,MAAMd,KDalCzB,EAAasC,KAChBtC,EAAasC,GAAW,IAG1BtC,EAAasC,GAASE,KAAK,CACzB/B,MAAO6B,EACPT,SAAUO,EACVC,UAGKA,GCxBU,IAACZ,CDwBXY,EErBHI,EAAqBhC,IACzB,IAAKR,EAAOD,EAAcS,GACxB,OAAO,SAGFT,EAAaS,EAAM,ECJtBiC,EAAM,CAACjC,EAAO4B,KAClB,IAAK1B,EAAIF,GACP,OAAO,EAGL4B,ECL2B,CAACA,IAChC,MAAMM,EAAOtC,OAAOsC,KAAK3C,GAGzB,IAAKqC,GAASM,EAAKjC,OAAS,EAC1B,OAAO,EAGTiC,EAAKrB,SAASgB,IACZ,MAAMf,EAAavB,EAAasC,GAChC,IAAI7B,EAEJc,EAAWD,SAAQ,CAACsB,EAAWC,KACzBD,EAAUf,WAAaQ,GAASO,EAAUP,QAAUA,IACtD5B,EAAQmC,EAAUnC,MAClBc,EAAWuB,QAbL,EAamBD,GAC1B,IAICtB,EAAWb,OAAS,GACtB+B,EAAkBhC,EACnB,GACD,EDjBAsC,CAAyBV,GAEzBI,EAAkBhC,EACnB,EETGuC,EAAO,CAACvC,EAAO2B,IACZD,EAAG1B,GAAO,WACfiC,EAAIjC,EAAO2B,GACXA,EAAQG,MAAMU,KAAMC,UACxB,ICRMC,EAAYC,GACM,iBAARA,ECGVC,EAAU5C,ICJA,CAACgB,IACf,MAAMC,EAAWrB,OAAOC,UAAUoB,SAClC,OAAO4B,MAAMC,QACTD,MAAMC,QAAQ9B,GACU,mBAAxBC,EAASa,MAAMd,EAAS,EDCxB8B,CAAQ9C,GEDa,CAACA,IAC1B,MAAMkC,EAAOtC,OAAOsC,KAEpB,IAAKhC,EAAIF,IAAUkC,EAAKjC,OAAS,EAC/B,OAAO,EAGTiC,EAAK3C,GAAcsB,SAASgB,IACtBrC,EAAOD,EAAcsC,IAAYA,EAAQkB,WAAW/C,WAC/CT,EAAasC,EACrB,GACD,EFTAmB,CAAmBhD,GAEf0C,EAAS1C,IACXgC,EAAkBhC,EAErB,EGJGiD,EAAOjD,IAGX,OAFaJ,OAAOsC,KAAK3C,GAEhBU,OAAS,EACT,GAGJD,ECVE0C,EAFQC,EDeD3C,ICdE,cACgBkD,KAAKP,GCDT,CAACf,IAC7B,MAAMM,EAAOtC,OAAOsC,KAAK3C,GACzB,IAAI4D,EAAmB,KAEvB,OAAIjB,EAAKjC,OAAS,EACT,MAGTV,EAAasB,SAASC,IACpBA,EAAWD,SAASsB,IACdA,EAAUf,WAAaQ,GAASO,EAAUP,QAAUA,IACtDuB,EAAmBrC,EACpB,GACD,IAGGqC,IFDIC,CAAsBpD,GACpB0C,EAAS1C,GGfA,CAACA,IACvB,MAAMkC,EAAOtC,OAAOsC,KAAK3C,GACzB,IAAI8D,EAAc,GAElB,OAAInB,EAAKjC,OAAS,GAIlBiC,EAAKrB,SAASgB,IACZ,MAAMf,EAAa,CAAE,EAEjBtB,EAAOD,EAAcsC,IAAYA,EAAQkB,WAAW/C,KACtDc,EAAWe,GAAWtC,EAAasC,GACnCwB,EAAYtB,KAAKjB,GAClB,IATMuC,CAYFA,EHDIC,CAAgBtD,QADlB,EIhBFT,EHDO,IAACoD,CDoBd,QKlBiB,CAWlBlC,KAAKT,EAAOU,EAAMC,GAAQ,GAGxB,OAFAF,EAAKT,EAAOU,EAAMC,GAEX6B,IACR,EAYDe,OAAOvD,EAAOU,GAGZ,MC/BW,EAACV,EAAOU,KACrBD,EAAKT,EAAOU,GAAM,EAAM,ED4BtB6C,CAAOvD,EAAOU,GAEP8B,IACR,EAUDd,GAAE,CAAC1B,EAAO2B,IACDD,EAAG1B,EAAO2B,GAYnBY,KAAI,CAACvC,EAAO2B,IACHY,EAAKvC,EAAO2B,GAWrB6B,IAAI7B,GEpEM,CAACA,GACJD,EAAG,IAAKC,GFoEN6B,CAAI7B,GAYbM,IAAIjC,EAAO4B,GAGT,OAFAK,EAAIjC,EAAO4B,GAEJY,IACR,EAWDI,OAAO5C,GAGL,OAFA4C,EAAO5C,GAEAwC,IACR,EASDiB,QAGE,MGlHU,MACZ,MAAMvB,EAAOtC,OAAOsC,KAAK3C,GAEzB,GAAI2C,EAAKjC,OAAS,EAChB,OAAO,EAGTiC,EAAKrB,SAASgB,WACLtC,EAAasC,EAAQ,GAC5B,EHuGA4B,GAEOjB,IACR,EAWDS,IAAIjD,GACKiD,EAAIjD,GAabE,IAAG,CAACF,EAAOG,GAAW,IACbD,EAAIF,EAAOG"}