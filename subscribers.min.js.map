{"version":3,"file":"subscribers.min.js","sources":["_subscribers.js","utils/hasOwn.js","_hasDirectSubscribersFor.js","has.js","_hasSubscribers.js","emit.js","utils/isTypedArray.js","utils/guid.js","on.js","utils/isFunction.js","_removeSubscriber.js","off.js","_removeSubscriberByToken.js","once.js","utils/isString.js","remove.js","utils/isArray.js","_removeSubscribers.js","get.js","utils/isToken.js","_getSubscriberByToken.js","_getSubscribers.js","_getAllSubscribers.js","subscribers.js","notify.js","all.js","clear.js"],"sourcesContent":["/**\n * 存储订阅者（主题和处理器的）私有对象\n * ========================================================================\n * @type {{}}\n * @private\n */\nconst _subscribers = {}\n\nexport default _subscribers\n","/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n  return obj && hasOwnProperty.call(obj, prop)\n}\n\nexport default hasOwn\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\n\n/**\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\n * ========================================================================\n * @method _hasDirectSubscribersFor\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _hasDirectSubscribersFor = (topic) => {\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\n}\n\nexport default _hasDirectSubscribersFor\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\nimport _hasSubscribers from './_hasSubscribers'\n\n/**\n * 判断是否存在包含 topic 指定的订阅者信息\n * ========================================================================\n * @method has\n * @param {String} topic - （必须）主题名称\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\n * @returns {Boolean}\n */\nconst has = (topic, isDirect = true) => {\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\n}\n\nexport default has\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\n\n/**\n * 判断是否存在包含给定 topic 相关的订阅者信息\n * ========================================================================\n * @method _hasSubscribers\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _hasSubscribers = (topic) => {\n  let found = _hasDirectSubscribersFor(topic)\n  let position = topic.lastIndexOf('.')\n\n  while (!found && position !== -1) {\n    topic = topic.substring(0, position)\n    position = topic.lastIndexOf('.')\n    found = _hasDirectSubscribersFor(topic)\n  }\n\n  return found\n}\n\nexport default _hasSubscribers\n","import _subscribers from './_subscribers'\nimport has from './has'\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\nimport isTypedArray from './utils/isTypedArray'\n\n/**\n * （异步）发布订阅主题信息\n * ========================================================================\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\n * ========================================================================\n * @method emit\n * @param {String} topic - （必须）主题名称\n * @param {Object} data - （必须）数据对象\n * @param {Boolean} async - (可选) 是否异步发布\n */\nconst emit = (topic, data, async = true) => {\n  const execute = (topic) => {\n    if (!_hasDirectSubscribersFor(topic)) {\n      return false\n    }\n\n    _subscribers[topic].forEach((subscriber) => {\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\n      // 采用 toString() 方法转化为普通（JSON）字符串\n      const message = isTypedArray(data) ? data.toString() : data\n      subscriber.callback.call(subscriber.context || subscriber, message)\n    })\n  }\n  const deliver = () => {\n    let subscriber = topic\n    let position = topic.lastIndexOf('.')\n\n    while (position !== -1) {\n      subscriber = subscriber.substring(0, position)\n      position = subscriber.lastIndexOf('.')\n\n      execute(subscriber)\n    }\n\n    // 执行 topic 对应的处理器\n    execute(topic)\n    // 执行特殊 topic：'*'（监听全部消息的发布）\n    execute('*')\n  }\n\n  if (!has(topic)) {\n    return false\n  }\n\n  if (async) {\n    setTimeout(deliver, 10)\n  } else {\n    deliver()\n  }\n}\n\nexport default emit\n","/**\n * 判断检测数据是否为 Typed Arrays 类型的数据\n * ========================================================================\n * @param {*} val\n * @returns {boolean}\n */\nconst isTypedArray = (val) => {\n  const TYPES = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]',\n    '[object BigInt64Array]',\n    '[object BigUint64Array]'\n  ]\n  const toString = Object.prototype.toString\n\n  return TYPES.indexOf(toString.call(val)) > -1\n}\n\nexport default isTypedArray\n","/**\n * 生成唯一 id 字符串的函数\n * ========================================================================\n * @method guid\n * @param {String} [prefix] - 生成 id 的前缀字符串\n * @return {String} 返回一个表示唯一 id 的字符串\n */\nconst guid = (() => {\n  let id = 0\n\n  return (prefix = 'guid-') => {\n    id += 1\n\n    return `${prefix + id}`\n  }\n})()\n\nexport default guid\n","import _subscribers from './_subscribers'\nimport isFunction from './utils/isFunction'\nimport guid from './utils/guid'\n\n/**\n * 订阅主题，并给出处理器函数\n * ========================================================================\n * @method on\n * @param {String} topic - （必须）主题名称\n * @param {Function} handler - （必须）主题的处理器函数\n * @param {Object} [context] - （可选）this 执行上下文\n * @return {String|Boolean} - 唯一的 token 字符串，例如：'guid-1'。\n */\nconst on = (topic, handler, context = null) => {\n  const token = guid()\n  let subject = typeof topic === 'symbol' ? topic.toString() : topic\n\n  if (!isFunction(handler)) {\n    return false\n  }\n\n  /* istanbul ignore else */\n  if (!_subscribers[subject]) {\n    _subscribers[subject] = []\n  }\n\n  _subscribers[subject].push({\n    topic: subject,\n    callback: handler,\n    context,\n    token\n  })\n\n  return token\n}\n\nexport default on\n","/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return Object.prototype.toString.apply(val) === '[object Function]'\n}\n\nexport default isFunction\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\n\n/**\n * 删除与给定 topic 相同的订阅者信息\n * ========================================================================\n * @method _removeSubscriber\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _removeSubscriber = (topic) => {\n  if (!hasOwn(_subscribers, topic)) {\n    return false\n  }\n\n  delete _subscribers[topic]\n}\n\nexport default _removeSubscriber\n","import has from './has'\nimport _removeSubscriber from './_removeSubscriber'\nimport _removeSubscriberByToken from './_removeSubscriberByToken'\n\n/**\n * 取消订阅主题\n * ========================================================================\n * @method off\n * @param {String} topic - （必须）订阅的主题\n * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\n */\nconst off = (topic, token) => {\n  if (!has(topic)) {\n    return false\n  }\n\n  if (token) {\n    _removeSubscriberByToken(token)\n  } else {\n    _removeSubscriber(topic)\n  }\n}\n\nexport default off\n","import _subscribers from './_subscribers'\nimport _removeSubscriber from './_removeSubscriber'\n\n/**\n * 通过订阅者 token 值删除订阅者信息\n * ========================================================================\n * @method _removeSubscriberByToken\n * @param {String} token - 订阅者 token 字符串\n * @returns {boolean}\n * @private\n */\nconst _removeSubscriberByToken = (token) => {\n  const keys = Object.keys(_subscribers)\n  let index = -1\n\n  if (!token || keys.length < 1) {\n    return false\n  }\n\n  keys.forEach((subject) => {\n    const subscriber = _subscribers[subject]\n    let topic\n\n    subscriber.forEach((execution, j) => {\n      if (execution.callback === token || execution.token === token) {\n        topic = execution.topic\n        subscriber.splice(index, j)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (subscriber.length < 1) {\n      _removeSubscriber(topic)\n    }\n  })\n}\n\nexport default _removeSubscriberByToken\n","import on from './on'\nimport off from './off'\n\n/**\n * 订阅主题，并给出处理器函数，接受到消息后，仅执行一次\n * ========================================================================\n * @method once\n * @param {String} topic - （必须）主题名称\n * @param {Function} handler - （必须）主题的处理器函数\n * @param {Object} [context] - （可选）this 执行上下文\n * @return {String|Boolean} - 唯一的 token 字符串，例如：'guid-1'。\n */\nconst once = (topic, handler, context = null) => {\n  return on(topic, function () {\n    off(topic, handler)\n    handler.apply(context || this, arguments)\n  })\n}\n\nexport default once\n","/**\n * 判断测试数据是否为 String 类型数据\n * ========================================================================\n * @method isString\n * @param {String} str - 测试数据\n * @return {Boolean}\n */\nconst isString = (str) => {\n  return typeof str === 'string'\n}\n\nexport default isString\n","import _removeSubscriber from './_removeSubscriber'\nimport _removeSubscribers from './_removeSubscribers'\nimport isArray from './utils/isArray'\nimport isString from './utils/isString'\n\n/**\n * 删除特定 topic 主题的订阅者信息。\n * ========================================================================\n * methods\n * @param {String|Array} topic\n */\nconst remove = (topic) => {\n  if (isArray(topic)) {\n    _removeSubscribers(topic)\n  } else {\n    if (isString(topic)) {\n      _removeSubscriber(topic)\n    }\n  }\n}\n\nexport default remove\n","/**\n * 检测测试数据是否为 Array 类型\n * ========================================================================\n * @method isArray\n * @param {*} val - 要检测的数据\n * @returns {Boolean} - 'val' 是 Array 则返回 true，否则返回 false\n */\nconst isArray = (val) => {\n  const toString = Object.prototype.toString\n  return Array.isArray\n    ? Array.isArray(val)\n    : toString.apply(val) === '[object Array]'\n}\n\nexport default isArray\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\nimport has from './has'\n\n/**\n * 删除包含 topic 主题的订阅者信息\n * ========================================================================\n * @method _removeSubscribers\n * @param {String} topic - （必须）主题名称\n * @returns {Boolean}\n */\nconst _removeSubscribers = (topic) => {\n  const keys = Object.keys\n\n  if (!has(topic) || keys.length < 1) {\n    return false\n  }\n\n  keys(_subscribers).forEach((subject) => {\n    if (hasOwn(_subscribers, subject) && subject.startsWith(topic)) {\n      delete _subscribers[subject]\n    }\n  })\n}\n\nexport default _removeSubscribers\n","import _subscribers from './_subscribers'\nimport isToken from './utils/isToken'\nimport isString from './utils/isString'\nimport _getAllSubscribers from './_getAllSubscribers'\nimport _getSubscribers from './_getSubscribers'\nimport _getSubscriberByToken from './_getSubscriberByToken'\n\n/**\n * 获取全部或者包含 topic 主题或者订阅 token 的订阅者信息\n * ========================================================================\n * @method get\n * @param {String} [topic] - （可选）主题名称或者订阅 token 值\n * @returns {Array|Object}\n */\nconst get = (topic) => {\n  const keys = Object.keys(_subscribers)\n\n  if (keys.length < 1) {\n    return []\n  }\n\n  if (!topic) {\n    return _getAllSubscribers()\n  } else {\n    if (isToken(topic)) {\n      return _getSubscriberByToken(topic)\n    } else if (isString(topic)) {\n      return _getSubscribers(topic)\n    }\n  }\n}\n\nexport default get\n","import isString from './isString'\n\n/**\n * 判断测试数据是否为订阅者的 token 字符串\n * ========================================================================\n * @method isToken\n * @param {String} str - 测试数据\n * @return {Boolean}\n */\nconst isToken = (str) => {\n  const pattern = /^guid-\\d+$/i\n  return isString(str) && pattern.test(str)\n}\n\nexport default isToken\n","import _subscribers from './_subscribers'\n\n/**\n * 获取全部的订阅者信息\n * ========================================================================\n * @method _getSubscriberByToken\n * @param {String} token - （必须）订阅者信息 token 字符串\n * @returns {{}} - 返回全部的订阅信息\n * @private\n */\nconst _getSubscriberByToken = (token) => {\n  const keys = Object.keys(_subscribers)\n  let targetSubscriber = null\n\n  if (keys.length < 1) {\n    return null\n  }\n\n  _subscribers.forEach((subscriber) => {\n    subscriber.forEach((execution) => {\n      if (execution.callback === token || execution.token === token) {\n        targetSubscriber = subscriber\n      }\n    })\n  })\n\n  return targetSubscriber\n}\n\nexport default _getSubscriberByToken\n","import hasOwn from './utils/hasOwn'\nimport _subscribers from './_subscribers'\n\n/**\n * 获取与指定 topic 相关的订阅者信息\n * ========================================================================\n * @method _getSubscribers\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Array} - 返回订阅者信息集合（数组）\n * @private\n */\nconst _getSubscribers = (topic) => {\n  const keys = Object.keys(_subscribers)\n  let subscribers = []\n\n  if (keys.length < 1) {\n    return subscribers\n  }\n\n  keys.forEach((subject) => {\n    const subscriber = {}\n\n    if (hasOwn(_subscribers, subject) && subject.startsWith(topic)) {\n      subscriber[subject] = _subscribers[subject]\n      subscribers.push(subscriber)\n    }\n  })\n\n  return subscribers\n}\n\nexport default _getSubscribers\n","import _subscribers from './_subscribers'\n\n/**\n * 获取全部的订阅者信息\n * ========================================================================\n * @method _getAllSubscribers\n * @returns {{}} - 返回全部的订阅信息\n * @private\n */\nconst _getAllSubscribers = () => {\n  return _subscribers\n}\n\nexport default _getAllSubscribers\n","import emit from './emit'\nimport notify from './notify'\nimport on from './on'\nimport once from './once'\nimport all from './all'\nimport off from './off'\nimport remove from './remove'\nimport clear from './clear'\nimport get from './get'\nimport has from './has'\n\nconst subscribers = {\n  /**\n   * 发布订阅主题信息\n   * ========================================================================\n   * @method emit\n   * @see emit\n   * @param {String} topic - （必须）主题名称\n   * @param {Object} data - （必须）数据对象\n   * @param {Boolean} async - (可选) 是否异步发布\n   * @returns {subscribers}\n   */\n  emit(topic, data, async = true) {\n    emit(topic, data, async)\n\n    return this\n  },\n\n  /**\n   * 同步发布订阅主题信息\n   * ========================================================================\n   * @method notify\n   * @alias emit\n   * @see emit\n   * @param {String} topic - （必须）主题名称\n   * @param {Object} data - （必须）数据对象\n   * @returns {subscribers}\n   */\n  notify(topic, data) {\n    notify(topic, data)\n\n    return this\n  },\n\n  /**\n   * 订阅主题，并给出处理器函数\n   * ========================================================================\n   * @method on\n   * @param {String} topic - （必须）主题名称\n   * @param {Function} handler - （必须）主题的处理器函数\n   * @return {String|Boolean} -\n   */\n  on(topic, handler) {\n    return on(topic, handler)\n  },\n\n  /**\n   * 订阅主题，并给出处理器函数，接受到消息后，仅执行一次\n   * ========================================================================\n   * @method once\n   * @see once\n   * @param {String} topic - （必须）主题名称\n   * @param {Function} handler - （必须）主题的处理器函数\n   * @return {String|Boolean}\n   */\n  once(topic, handler) {\n    return once(topic, handler)\n  },\n\n  /**\n   * 订阅所有主题消息发布，任何消息发布都会执行 handler() 处理器\n   * ========================================================================\n   * @method all\n   * @see all\n   * @param {Function} handler - （必须）处理器函数\n   * @return {String|Boolean}\n   */\n  all(handler) {\n    return all(handler)\n  },\n\n  /**\n   * 取消订阅主题\n   * ========================================================================\n   * @method off\n   * @see off\n   * @param {String} topic - （必须）订阅的主题\n   * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\n   * @returns {subscribers}\n   */\n  off(topic, token) {\n    off(topic, token)\n\n    return this\n  },\n\n  /**\n   * 删除特定 topic 或者多个主题的订阅者信息\n   * ========================================================================\n   * @method remove\n   * @see _removeSubscriber\n   * @see _removeSubscribers\n   * @param {String|Array} topic - （必须）主题名称\n   * @returns {subscribers}\n   */\n  remove(topic) {\n    remove(topic)\n\n    return this\n  },\n\n  /**\n   * 清理所有订阅者（主题和处理器的）信息\n   * ========================================================================\n   * @method clear\n   * @see clear\n   * @returns {subscribers}\n   */\n  clear() {\n    clear()\n\n    return this\n  },\n\n  /**\n   * 获取全部或者包含 topic 主题的订阅者信息\n   * ========================================================================\n   * @method get\n   * @param {String} [topic] - （可选）主题名称\n   *                            传递 topic 参数，返回包含 topic 主题的订阅者信息\n   *                            不传递 topic 参数，返回全部订阅者信息\n   * @returns {*[]}\n   */\n  get(topic) {\n    return get(topic)\n  },\n\n  /**\n   * 判断是否存在包含 topic 指定的订阅者信息\n   * ========================================================================\n   * @method has\n   * @see _hasSubscribers\n   * @see _hasDirectSubscribersFor\n   * @param {String} topic - （必须）主题名称\n   * @param {Boolean} [isDirect] -（可选）是否为直接的主题，默认值：true\n   * @returns {Boolean}\n   */\n  has(topic, isDirect = true) {\n    return has(topic, isDirect)\n  }\n}\n\nexport default subscribers\n","import emit from './emit'\n\n/**\n * 同步发布订阅主题信息\n * ========================================================================\n * @method notify\n * @alias emit\n * @param {String} topic - （必须）主题名称\n * @param {Object} data - （必须）数据对象\n */\nconst notify = (topic, data) => {\n  emit(topic, data, false)\n}\n\nexport default notify\n","import on from './on'\n\n/**\n * 订阅所有主题消息发布，任何消息发布都会执行 handler() 处理器\n * ========================================================================\n * @method all\n * @param {Function} handler - （必须）事件监听的处理器方法\n * @returns {String|Boolean}\n */\nconst all = (handler) => {\n  return on('*', handler)\n}\n\nexport default all\n","import _subscribers from './_subscribers'\n\n/**\n * 清理所有订阅者信息\n * ========================================================================\n * @method clear\n */\nconst clear = () => {\n  const keys = Object.keys(_subscribers)\n\n  if (keys.length < 1) {\n    return false\n  }\n\n  keys.forEach((subject) => {\n    delete _subscribers[subject]\n  })\n}\n\nexport default clear\n"],"names":["_subscribers","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","_hasDirectSubscribersFor","topic","length","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","data","async","execute","forEach","subscriber","message","val","toString","indexOf","isTypedArray","callback","context","deliver","setTimeout","guid","id","prefix","on","handler","token","subject","apply","push","_removeSubscriber","off","keys","execution","j","splice","_removeSubscriberByToken","once","this","arguments","isString","str","remove","Array","isArray","startsWith","_removeSubscribers","get","test","targetSubscriber","_getSubscriberByToken","subscribers","_getSubscribers","notify","all","clear"],"mappings":"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"}