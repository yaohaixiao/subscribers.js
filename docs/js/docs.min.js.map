{"version":3,"file":"docs.min.js","sources":["../../_subscribers.js","../../utils/hasOwn.js","../../_hasDirectSubscribersFor.js","../../has.js","../../_hasSubscribers.js","../../emit.js","../../utils/isTypedArray.js","../../utils/guid.js","../../on.js","../../utils/isFunction.js","../../_removeSubscriber.js","../../off.js","../../_removeSubscriberByToken.js","../../subscribers.core.js","../../api/js/scroller.js","../../node_modules/@yaohaixiao/delegate.js/createEvent.js","../../node_modules/@yaohaixiao/delegate.js/isString.js","../../node_modules/@yaohaixiao/delegate.js/isElement.js","../../node_modules/@yaohaixiao/delegate.js/getListeners.js","../../node_modules/@yaohaixiao/delegate.js/enum.js","../../node_modules/@yaohaixiao/delegate.js/_off.js","../../node_modules/@yaohaixiao/delegate.js/_delete.js","../../node_modules/@yaohaixiao/delegate.js/purgeElement.js","../../node_modules/@yaohaixiao/delegate.js/isFunction.js","../../node_modules/@yaohaixiao/delegate.js/_typeof.js","../../node_modules/@yaohaixiao/delegate.js/off.js","../../node_modules/@yaohaixiao/delegate.js/matches.js","../../node_modules/@yaohaixiao/delegate.js/getParentOrHost.js","../../node_modules/@yaohaixiao/delegate.js/resolveTextNode.js","../../node_modules/@yaohaixiao/delegate.js/getTarget.js","../../node_modules/@yaohaixiao/delegate.js/on.js","../../node_modules/@yaohaixiao/delegate.js/closest.js","../../node_modules/@yaohaixiao/delegate.js/isIE.js","../../node_modules/@yaohaixiao/delegate.js/getTypes.js","../../node_modules/@yaohaixiao/delegate.js/getScroll.js","../../node_modules/@yaohaixiao/delegate.js/getPageX.js","../../node_modules/@yaohaixiao/delegate.js/getScrollLeft.js","../../node_modules/@yaohaixiao/delegate.js/getPageY.js","../../node_modules/@yaohaixiao/delegate.js/getScrollTop.js","../../node_modules/@yaohaixiao/delegate.js/getCharCode.js","../../node_modules/@yaohaixiao/delegate.js/isAppleSafari.js","../../node_modules/@yaohaixiao/delegate.js/preventDefault.js","../../node_modules/@yaohaixiao/delegate.js/stopPropagation.js","../../node_modules/@yaohaixiao/delegate.js/stopEvent.js","../../node_modules/@yaohaixiao/delegate.js/emitter.js","../../node_modules/@yaohaixiao/delegate.js/hasEvent.js","../../node_modules/@yaohaixiao/delegate.js/getPageXY.js","../../node_modules/@yaohaixiao/delegate.js/getRelatedTarget.js","../../node_modules/@yaohaixiao/delegate.js/destroy.js","../../node_modules/@yaohaixiao/delegate.js/once.js","../../node_modules/@yaohaixiao/delegate.js/focusin.js","../../node_modules/@yaohaixiao/delegate.js/focusout.js","../../node_modules/@yaohaixiao/delegate.js/trigger.js","../../node_modules/@yaohaixiao/delegate.js/stopImmediate.js","../../node_modules/@yaohaixiao/delegate.js/delegate.js","../../api/js/anchors.js","../../api/js/buttons.js","../../api/js/main.js"],"sourcesContent":["/**\n * 存储订阅者（主题和处理器的）私有对象\n * ========================================================================\n * @type {{}}\n * @private\n */\nconst _subscribers = {}\n\nexport default _subscribers\n","/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n  return obj && hasOwnProperty.call(obj, prop)\n}\n\nexport default hasOwn\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\n\n/**\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\n * ========================================================================\n * @method _hasDirectSubscribersFor\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _hasDirectSubscribersFor = (topic) => {\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\n}\n\nexport default _hasDirectSubscribersFor\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\nimport _hasSubscribers from './_hasSubscribers'\n\n/**\n * 判断是否存在包含 topic 指定的订阅者信息\n * ========================================================================\n * @method has\n * @param {String} topic - （必须）主题名称\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\n * @returns {Boolean}\n */\nconst has = (topic, isDirect = true) => {\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\n}\n\nexport default has\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\n\n/**\n * 判断是否存在包含给定 topic 相关的订阅者信息\n * ========================================================================\n * @method _hasSubscribers\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _hasSubscribers = (topic) => {\n  let found = _hasDirectSubscribersFor(topic)\n  let position = topic.lastIndexOf('.')\n\n  while (!found && position !== -1) {\n    topic = topic.substring(0, position)\n    position = topic.lastIndexOf('.')\n    found = _hasDirectSubscribersFor(topic)\n  }\n\n  return found\n}\n\nexport default _hasSubscribers\n","import _subscribers from './_subscribers'\nimport has from './has'\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\nimport isTypedArray from './utils/isTypedArray'\n\n/**\n * （异步）发布订阅主题信息\n * ========================================================================\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\n * ========================================================================\n * @method emit\n * @param {String} topic - （必须）主题名称\n * @param {Object} data - （必须）数据对象\n * @param {Boolean} async - (可选) 是否异步发布\n */\nconst emit = (topic, data, async = true) => {\n  const execute = (topic) => {\n    if (!_hasDirectSubscribersFor(topic)) {\n      return false\n    }\n\n    _subscribers[topic].forEach((subscriber) => {\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\n      // 采用 toString() 方法转化为普通（JSON）字符串\n      const message = isTypedArray(data) ? data.toString() : data\n      subscriber.callback.call(subscriber.context || subscriber, message)\n    })\n  }\n  const deliver = () => {\n    let subscriber = topic\n    let position = topic.lastIndexOf('.')\n\n    while (position !== -1) {\n      subscriber = subscriber.substring(0, position)\n      position = subscriber.lastIndexOf('.')\n\n      execute(subscriber)\n    }\n\n    // 执行 topic 对应的处理器\n    execute(topic)\n    // 执行特殊 topic：'*'（监听全部消息的发布）\n    execute('*')\n  }\n\n  if (!has(topic)) {\n    return false\n  }\n\n  if (async) {\n    setTimeout(deliver, 10)\n  } else {\n    deliver()\n  }\n}\n\nexport default emit\n","/**\n * 判断检测数据是否为 Typed Arrays 类型的数据\n * ========================================================================\n * @param {*} val\n * @returns {boolean}\n */\nconst isTypedArray = (val) => {\n  const TYPES = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]',\n    '[object BigInt64Array]',\n    '[object BigUint64Array]'\n  ]\n  const toString = Object.prototype.toString\n\n  return TYPES.indexOf(toString.call(val)) > -1\n}\n\nexport default isTypedArray\n","/**\n * 生成唯一 id 字符串的函数\n * ========================================================================\n * @method guid\n * @param {String} [prefix] - 生成 id 的前缀字符串\n * @return {String} 返回一个表示唯一 id 的字符串\n */\nconst guid = (() => {\n  let id = 0\n\n  return (prefix = 'guid-') => {\n    id += 1\n\n    return `${prefix + id}`\n  }\n})()\n\nexport default guid\n","import _subscribers from './_subscribers'\nimport isFunction from './utils/isFunction'\nimport guid from './utils/guid'\n\n/**\n * 订阅主题，并给出处理器函数\n * ========================================================================\n * @method on\n * @param {String} topic - （必须）主题名称\n * @param {Function} handler - （必须）主题的处理器函数\n * @param {Object} [context] - （可选）this 执行上下文\n * @return {String|Boolean} - 唯一的 token 字符串，例如：'guid-1'。\n */\nconst on = (topic, handler, context = null) => {\n  const token = guid()\n  let subject = typeof topic === 'symbol' ? topic.toString() : topic\n\n  if (!isFunction(handler)) {\n    return false\n  }\n\n  /* istanbul ignore else */\n  if (!_subscribers[subject]) {\n    _subscribers[subject] = []\n  }\n\n  _subscribers[subject].push({\n    topic: subject,\n    callback: handler,\n    context,\n    token\n  })\n\n  return token\n}\n\nexport default on\n","/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return Object.prototype.toString.apply(val) === '[object Function]'\n}\n\nexport default isFunction\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\n\n/**\n * 删除与给定 topic 相同的订阅者信息\n * ========================================================================\n * @method _removeSubscriber\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _removeSubscriber = (topic) => {\n  if (!hasOwn(_subscribers, topic)) {\n    return false\n  }\n\n  delete _subscribers[topic]\n}\n\nexport default _removeSubscriber\n","import has from './has'\nimport _removeSubscriber from './_removeSubscriber'\nimport _removeSubscriberByToken from './_removeSubscriberByToken'\n\n/**\n * 取消订阅主题\n * ========================================================================\n * @method off\n * @param {String} topic - （必须）订阅的主题\n * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\n */\nconst off = (topic, token) => {\n  if (!has(topic)) {\n    return false\n  }\n\n  if (token) {\n    _removeSubscriberByToken(token)\n  } else {\n    _removeSubscriber(topic)\n  }\n}\n\nexport default off\n","import _subscribers from './_subscribers'\nimport _removeSubscriber from './_removeSubscriber'\n\n/**\n * 通过订阅者 token 值删除订阅者信息\n * ========================================================================\n * @method _removeSubscriberByToken\n * @param {String} token - 订阅者 token 字符串\n * @returns {boolean}\n * @private\n */\nconst _removeSubscriberByToken = (token) => {\n  const keys = Object.keys(_subscribers)\n  let index = -1\n\n  if (!token || keys.length < 1) {\n    return false\n  }\n\n  keys.forEach((subject) => {\n    const subscriber = _subscribers[subject]\n    let topic\n\n    subscriber.forEach((execution, j) => {\n      if (execution.callback === token || execution.token === token) {\n        topic = execution.topic\n        subscriber.splice(index, j)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (subscriber.length < 1) {\n      _removeSubscriber(topic)\n    }\n  })\n}\n\nexport default _removeSubscriberByToken\n","import emit from './emit'\nimport on from './on'\nimport off from './off'\n\nconst subscribers = {\n  on(topic, handler) {\n    return on(topic, handler)\n  },\n\n  emit(topic, data, async = true) {\n    emit(topic, data, async)\n\n    return this\n  },\n\n  off(topic, token) {\n    off(topic, token)\n\n    return this\n  }\n}\n\nexport default subscribers\n","import $observer from '../../subscribers.core'\n\nconst $main = document.querySelector('#main')\nconst MIN = 0\nconst MAX = $main.scrollHeight\nlet timer = null\nlet playing = false\n\nconst scrollTo = (top, speed = 100) => {\n  let scrollTop = $main.scrollTop\n  const distance = top - scrollTop\n  const step = Math.ceil(distance / 15)\n  const scroll = () => {\n    if (timer) {\n      clearTimeout(timer)\n    }\n\n    scrollTop += step\n\n    if (\n      (scrollTop <= top && distance < 0) ||\n      (scrollTop >= top && distance > 0)\n    ) {\n      scrollTop = top\n      playing = false\n    }\n\n    $main.scrollTop = scrollTop\n\n    if (!playing) {\n      clearTimeout(timer)\n      timer = null\n      $observer.emit('buttons:toggle', scrollTop)\n      return false\n    } else {\n      timer = setTimeout(scroll, speed)\n    }\n  }\n\n  if (playing) {\n    clearTimeout(timer)\n    timer = null\n    playing = false\n\n    return false\n  }\n\n  playing = true\n\n  scroll()\n}\n\nconst sync = () => {\n  const Observer = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.intersectionRatio > 0) {\n          $observer.emit('sync:anchor', entry.target.getAttribute('id'))\n        }\n      })\n    },\n    {\n      root: $main,\n      rootMargin: '0px 0px -90% 0px'\n    }\n  )\n\n  $main.querySelectorAll('.section__h3').forEach((section) => {\n    Observer.observe(section)\n  })\n}\n\nconst onScrollToTop = (speed) => {\n  scrollTo(MIN, speed)\n}\nconst onScrollToBottom = (speed) => {\n  scrollTo(MAX, speed)\n}\n\nconst onScrollToMethod = (method) => {\n  const $method = document.querySelector(`#${method}`)\n  scrollTo($method.offsetTop)\n}\n\nconst setup = () => {\n  sync()\n\n  $observer.on('scroll:to:top', onScrollToTop)\n  $observer.on('scroll:to:bottom', onScrollToBottom)\n  $observer.on('scroll:to:method', onScrollToMethod)\n}\n\nexport default {\n  setup\n}\n","/**\n * 创建自定义事件（CustomerEvent）\n * ========================================================================\n * @method createEvent\n * @param {String} type - （必须）事件类型（名称）\n * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\n * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\n * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\n * @returns {CustomEvent} - CustomerEvent 实例\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const logEvent = createEvent('log', {\n *   name: 'Yao',\n *   hi() {\n *     console.log('hi！！！')\n *   }\n * })\n *\n * const logHandler = function(evt) {\n *   console.log('detail', evt.detail)\n *   console.log('type', evt.type)\n * }\n *\n * $nav.addEventListener('log', logHandler)\n *\n * $nav.dispatchEvent(logEvent)\n */\nconst createEvent = (\n  type,\n  detail = null,\n  bubbles = true,\n  cancelable = true\n) => {\n  return new CustomEvent(type, {\n    detail: detail,\n    bubbles: bubbles,\n    cancelable: cancelable\n  })\n}\n\nexport default createEvent\n","/**\n * 判断是否为 String 类型值\n * ========================================================================\n * @method isString\n * @param {*} val - （必须）待检测的字符串\n * @returns {Boolean}\n */\nconst isString = (val) => {\n  return typeof val === 'string'\n}\n\nexport default isString\n","/**\n * 检测是否为 HTMLElement 元素节点\n * ========================================================================\n * @method isElement\n * @param {*|HTMLElement} el - （必须）待检测的数据（DOM 元素）\n * @returns {Boolean}\n */\nconst isElement = (el) => {\n  return !!(el && el.nodeName && el.tagName && el.nodeType === 1)\n}\n\nexport default isElement\n","import isString from './isString'\n\n/**\n * 获取 DOM 元素（type 事件类型）事件绑定信息\n * ========================================================================\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\n * ========================================================================\n * @methods getListeners\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\n * @param {String} [type] - （可选）事件类型\n * @returns {Array} - 已绑定的事件信息\n */\nconst getListeners = (el, type) => {\n  let listeners = el._listeners || []\n\n  if (isString(type) && type) {\n    listeners = listeners.filter((listener) => {\n      return listener.type === type\n    })\n  }\n\n  return listeners\n}\n\nexport default getListeners\n","export const CAPTURE_EVENTS = [\n  'focusout',\n  'blur',\n  'focusin',\n  'focus',\n  'load',\n  'unload',\n  'mouseenter',\n  'mouseleave'\n]\n","import { CAPTURE_EVENTS } from './enum'\nimport _delete from './_delete'\n\n/**\n * （私有方法）取消 type 类型的代理事件绑定\n * ========================================================================\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n * ========================================================================\n * @method _off\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {Function} fn - （必须）事件处理器回调函数\n * @private\n */\nconst _off = (el, type, fn) => {\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\n\n  /* istanbul ignore else */\n  if (fn._delegateListener) {\n    fn = fn._delegateListener\n    delete fn._delegateListener\n  }\n\n  // 移除缓存的 _listeners 数据\n  _delete(el, type, fn)\n\n  el.removeEventListener(type, fn, capture)\n}\n\nexport default _off\n","/**\n * 删除 DOM 元素缓存的 _listeners 数据\n * ========================================================================\n * @method _delete\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\n * @param {String} type - 事件类型（名称）\n * @param {Function} [fn] - 事件处理器回调函数\n */\nconst _delete = function (el, type, fn) {\n  const listeners = el._listeners\n  let index = -1\n\n  if (listeners.length < 1) {\n    return false\n  }\n\n  // 移除缓存的 _listeners 数据\n  listeners.forEach((listener, i) => {\n    const handler = listener.fn\n\n    if (type === listener.type) {\n      index = i\n\n      if (handler === fn) {\n        index = i\n      }\n    }\n  })\n\n  /* istanbul ignore else */\n  if (index > -1) {\n    listeners.splice(index, 1)\n  }\n}\n\nexport default _delete\n","import isString from './isString'\nimport isElement from './isElement'\nimport getListeners from './getListeners'\nimport _off from './_off'\n\n/**\n * 销毁（type 类型的）代理事件绑定\n * ========================================================================\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\n * ========================================================================\n * @method purgeElement\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\n * @param {String|Boolean} type - （必须）事件类型\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\n */\nconst purgeElement = function (el, type, recurse = false) {\n  const $element = isString(el) ? document.querySelector(el) : el\n  const $children = $element.childNodes\n  const listeners = getListeners($element, type)\n\n  listeners.forEach((listener) => {\n    _off($element, listener.type, listener.fn)\n  })\n\n  if (\n    (recurse || type === true || arguments.length === 1) &&\n    $element &&\n    $children\n  ) {\n    $children.forEach(($child) => {\n      if (isElement($child)) {\n        purgeElement($child, type, recurse)\n      }\n    })\n  }\n}\n\nexport default purgeElement\n","import _typeof from './_typeof'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return typeof val === 'function' || _typeof(val) === '[object Function]'\n}\n\nexport default isFunction\n","/**\n * 返回检测数据调用 toString() 方法后的字符串，用以判断数据类型。\n * ========================================================================\n * @method _typeof\n * @param {*} val - （必须）待检测的数据\n * @returns {String}\n *\n * @example\n * _typeof({})\n * // => '[object Object]'\n *\n * _typeof(function(){})\n * // => '[object Function]'\n *\n * _typeof([])\n * // => '[object Array]'\n *\n * _typeof('')\n * // => '[object String]'\n *\n * _typeof(2)\n * // => '[object Number]'\n */\nconst _typeof = (val) => {\n  return Object.prototype.toString.apply(val)\n}\n\nexport default _typeof\n","import purgeElement from './purgeElement'\nimport isFunction from './isFunction'\nimport _off from './_off'\n\n/**\n * 取消 type 类型的代理事件绑定\n * ========================================================================\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n * ========================================================================\n * @method off\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {Function} [fn] - （可选）事件处理器回调函数\n */\nconst off = (el, type, fn) => {\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\n  if (!isFunction(fn)) {\n    return purgeElement(el, type)\n  }\n\n  _off(el, type, fn)\n}\n\nexport default off\n","/**\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\n * ========================================================================\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\n * 标 DOM 元素是否为事件代理所期望触发的目标。\n * ========================================================================\n * @method matches\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\n * @param {HTMLElement} el - （必须）DOM 元素\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\n * @returns {Boolean}\n */\nconst matches = (el, selector = '') => {\n  const sel = selector.replace(/^>/i, '')\n\n  if (!selector || !sel || !el) {\n    return false\n  }\n\n  /* istanbul ignore else */\n  if (el.matches) {\n    return el.matches(sel)\n  } else if (el.msMatchesSelector) {\n    return el.msMatchesSelector(sel)\n  } else {\n    return false\n  }\n}\n\nexport default matches\n","/**\n * 获取 DOM 元素的父节点\n * ========================================================================\n * @method getParentOrHost\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\n * @returns {*|HTMLElement}\n */\nconst getParentOrHost = (el) => {\n  return el.host && el !== document && el.host.nodeType\n    ? el.host\n    : el.parentNode\n}\n\nexport default getParentOrHost\n","/**\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\n * resolveTextNode() 方法则会返回实际的目标节点。\n * ========================================================================\n * @method resolveTextNode\n * @param {HTMLElement|Text} el - 要解析的节点\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\n */\nconst resolveTextNode = function (el) {\n  if (el && el.nodeType === 3) {\n    return el.parentNode\n  }\n\n  return el\n}\n\nexport default resolveTextNode\n","import resolveTextNode from './resolveTextNode'\n\n/**\n * 返回触发事件的 target DOM 元素\n * ========================================================================\n * @method getTarget\n * @param {Event} evt - Event 对象\n * @return {HTMLElement} - Event 对象的 target DOM 元素\n */\nconst getTarget = function (evt) {\n  const target = evt.target\n\n  return resolveTextNode(target)\n}\n\nexport default getTarget\n","import closest from './closest'\nimport off from './off'\nimport getTarget from './getTarget'\nimport { CAPTURE_EVENTS } from './enum'\n\n/**\n * 绑定代理事件\n * ========================================================================\n * @method on\n * @param {HTMLElement|String} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {String} type - （必须）事件类型\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} once - （可选）是否仅触发一次\n */\nconst on = (el, selector, type, fn, data, context, once = false) => {\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\n\n  const listener = function (evt) {\n    const target = getTarget(evt)\n    // 通过 Element.matches 方法获得点击的目标元素\n    const delegateTarget = closest(target, selector, el)\n    let overrideContext = context || el\n\n    evt.delegateTarget = delegateTarget\n\n    // 当设置为 true 时，则事件处理器回调函数的\n    // this 上下文指向为 data 对象\n    if (context === true) {\n      overrideContext = data\n    }\n\n    /* istanbul ignore else */\n    if (delegateTarget) {\n      // 仅触发一次\n      /* istanbul ignore else */\n      if (once === true) {\n        off(el, type, listener)\n      }\n\n      fn.call(overrideContext, evt, data)\n    }\n  }\n\n  if (!el._listeners) {\n    el._listeners = []\n  }\n\n  // 缓存 options 元素绑定的事件处理器\n  el._listeners.push({\n    el,\n    selector,\n    type,\n    fn: listener,\n    data,\n    context,\n    capture\n  })\n\n  // 缓存包装后的事件处理器\n  fn._delegateListener = listener\n\n  el.addEventListener(type, listener, capture)\n}\n\nexport default on\n","import matches from './matches'\nimport getParentOrHost from './getParentOrHost'\n\n/**\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\n * ========================================================================\n * @method closest\n * @param {HTMLElement} el - （必须）DOM 元素\n * @param {String} selector - （必须）DOM 元素的选择其\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\n */\nconst closest = (el, selector, ctx, includeCTX) => {\n  const context = ctx || document\n\n  if (!el) {\n    return null\n  }\n\n  do {\n    /* istanbul ignore else */\n    if (\n      (selector != null &&\n        (selector[0] === '>'\n          ? el.parentNode === context && matches(el, selector)\n          : matches(el, selector))) ||\n      (includeCTX && el === context)\n    ) {\n      return el\n    }\n\n    /* istanbul ignore else */\n    if (el === context) {\n      break\n    }\n\n    /* jshint boss:true */\n  } while ((el = getParentOrHost(el)))\n}\n\nexport default closest\n","/**\n * 检测当前浏览器是否为 IE 浏览器\n * ========================================================================\n * IE 浏览器返回 true，其它浏览器返回 false\n * ========================================================================\n * @method isIE\n * @returns {Boolean} - IE 浏览器返回 true，其它浏览器返回 false\n */\nconst isIE = () => {\n  const agent = navigator.userAgent\n\n  return !!agent.match(/Trident/g) || !!agent.match(/MSIE/g)\n}\n\nexport default isIE\n","import getListeners from './getListeners'\n\n/**\n * 返回已绑定的事件类型的数组（去除名称重复的事件）\n * ========================================================================\n * @method getTypes\n * @returns {Array}\n */\nconst getTypes = (el) => {\n  const listeners = getListeners(el)\n  const types = []\n\n  listeners.forEach((listener) => {\n    types.push(listener.type)\n  })\n\n  return [...new Set(types)]\n}\n\nexport default getTypes\n","/**\n * 获取 scrollTop 和 scrollLeft 数组数据\n * ========================================================================\n * IE 浏览器种计算 pageX 和 pageY，需要包含 scrollTop 和 scrollLeft 的值\n * ========================================================================\n * @method getScroll\n * @return {Array} - 返回滚动信息的数组 [scrollTop, scrollLeft]\n */\nconst getScroll = function () {\n  const $body = document.documentElement || document.body\n  let scrollXY = [0, 0]\n\n  if ($body && ($body.scrollTop || $body.scrollLeft)) {\n    scrollXY = [$body.scrollTop, $body.scrollLeft]\n  }\n\n  return scrollXY\n}\n\nexport default getScroll\n","import getScrollLeft from './getScrollLeft'\nimport isIE from './isIE'\n\n/**\n * 获取事件触发时的 pageX 值\n * ========================================================================\n * @method getPageX\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageX\n * @param {Event} evt - （必须）Event 对象\n * @return {Number} - 返回事件触发时的 pageX 值\n */\nconst getPageX = function (evt) {\n  let x = evt.pageX\n\n  /* istanbul ignore else */\n  if (!x && 0 !== x) {\n    x = evt.clientX || 0\n\n    if (isIE()) {\n      x += getScrollLeft()\n    }\n  }\n\n  return x\n}\n\nexport default getPageX\n","import getScroll from './getScroll'\n\n/**\n * 获取 scrollTop 值\n * ========================================================================\n * @method getScrollLeft\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollLeft\n * @return {Number} - 返回 scrollLeft 值\n */\nconst getScrollLeft = function () {\n  return getScroll()[1]\n}\n\nexport default getScrollLeft\n","import getScrollTop from './getScrollTop'\nimport isIE from './isIE'\n\n/**\n * 获取事件触发时的 pageY 值\n * ========================================================================\n * @method getPageY\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageY\n * @param {Event} evt - （必须）Event 对象\n * @return {Number} - 返回事件触发时的 pageY 值\n */\nconst getPageY = function (evt) {\n  let y = evt.pageY\n\n  /* istanbul ignore else */\n  if (!y && 0 !== y) {\n    y = evt.clientY || 0\n\n    if (isIE()) {\n      y += getScrollTop()\n    }\n  }\n\n  return y\n}\n\nexport default getPageY\n","import getScroll from './getScroll'\n\n/**\n * 获取 scrollTop 值\n * ========================================================================\n * @method getScrollTop\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop\n * @return {Number} - 返回 getScrollTop 值\n */\nconst getScrollTop = function () {\n  return getScroll()[0]\n}\n\nexport default getScrollTop\n","import isAppleSafari from './isAppleSafari'\n\n/**\n * 返回触发事件的 charCode\n * ========================================================================\n * @method getCharCode\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/keyCode\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/charCode\n * @param {Event} evt - Event 对象\n * @return {Number} - 返回事件的 charCode\n */\nconst getCharCode = function (evt) {\n  let code = evt.keyCode || evt.charCode\n  // keycodes for webkit/safari\n  const webkitKeymap = {\n    63232: 38, // up\n    63233: 40, // down\n    63234: 37, // left\n    63235: 39, // right\n    63276: 33, // page up\n    63277: 34, // page down\n    25: 9 // The SHIFT-TAB (Safari provides a different key code in\n    // this case, even though the shiftKey modifier is set)\n  }\n\n  // webkit key normalization\n  if (isAppleSafari() && code in webkitKeymap) {\n    code = webkitKeymap[code]\n  }\n\n  return code\n}\n\nexport default getCharCode\n","/**\n * 判断是否为 Apple 设备的 Safari 浏览器\n * ========================================================================\n * @method isAppleSafari\n * @returns {Boolean}\n */\nconst isAppleSafari = () => {\n  const UA = navigator.userAgent\n  const platforms = /Mac|iPhone|iPod|iPad/i\n  const rejected = /Chrome|Android|CriOS|FxiOS|EdgiOS/i\n  const expected = /Safari/i\n\n  if (rejected.test(UA)) {\n    return false\n  }\n\n  return platforms.test(UA) && expected.test(UA)\n}\n\nexport default isAppleSafari\n","/**\n * 阻止触发绑定事件 DOM 元素的默认行为\n * ========================================================================\n * @method preventDefault\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault\n * @param {Event} evt - 事件对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('.anchor')\n *\n * on($nav, 'click', function(evt) {\n *   console.log('你点击了导航栏')\n * })\n *\n * on($anchor, 'click', function(evt) {\n *   console.log('tagName', this.tagName)\n *\n *   // 在工作台输出：'a'\n *   // 会触发事件冒泡，输出：'你点击了导航栏'\n *   // 但不会切换到 href 属性的页面地址，阻止了点击链接的默认行为\n *   stopEvent(evt)\n * })\n */\nconst preventDefault = function (evt) {\n  evt.preventDefault()\n}\n\nexport default preventDefault\n","/**\n * 终止事件在传播过程的捕获或冒泡的事件流\n * ========================================================================\n * @method stopPropagation\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation\n * @param {Event} evt - 事件对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('.anchor')\n *\n * on($nav, 'click', function(evt) {\n *   console.log('你点击了导航栏')\n * })\n *\n * on($anchor, 'click', function(evt) {\n *   console.log('tagName', this.tagName)\n *\n *   // 工作台输出：'a'\n *   // 然后跳转到 href 的地址\n *   // 但不会触发事件冒泡，输出：'你点击了导航栏'\n *   stopPropagation(evt)\n * })\n */\nconst stopPropagation = function (evt) {\n  evt.stopPropagation()\n}\n\nexport default stopPropagation\n","import stopPropagation from './stopPropagation'\nimport preventDefault from './preventDefault'\n\n/**\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\n * ========================================================================\n * @method stopEvent\n * @param {Event} evt - 事件对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('.anchor')\n *\n * on($nav, 'click', function(evt) {\n *   console.log('你点击了导航栏')\n * })\n *\n * on($anchor, 'click', function(evt) {\n *   console.log('tagName', this.tagName)\n *\n *   // 工作台输出：'a'\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\n *   stopEvent(evt)\n * })\n */\nconst stopEvent = function (evt) {\n  stopPropagation(evt)\n  preventDefault(evt)\n}\n\nexport default stopEvent\n","import createEvent from './createEvent'\nimport off from './off'\nimport on from './on'\nimport once from './once'\nimport focusin from './focusin'\nimport focusout from './focusout'\nimport isElement from './isElement'\nimport isString from './isString'\nimport getListeners from './getListeners'\nimport getTypes from './getTypes'\nimport hasEvent from './hasEvent'\nimport getPageX from './getPageX'\nimport getPageY from './getPageY'\nimport getPageXY from './getPageXY'\nimport getCharCode from './getCharCode'\nimport getRelatedTarget from './getRelatedTarget'\nimport getTarget from './getTarget'\nimport purgeElement from './purgeElement'\nimport destroy from './destroy'\nimport preventDefault from './preventDefault'\nimport stopPropagation from './stopPropagation'\nimport stopEvent from './stopEvent'\nimport stopImmediate from './stopImmediate'\nimport trigger from './trigger'\n\n/**\n * Emitter 类 - JavaScript 事件代理对象\n * ========================================================================\n */\nclass Emitter {\n  /**\n   * Emitter 构造函数\n   * ========================================================================\n   * @constructor\n   * @param {HTMLElement|String} el - （必须）DOM 元素或其选择器\n   * @returns {Emitter} - Emitter 对象\n   */\n  constructor(el) {\n    if (isElement(el)) {\n      this.$el = el\n    } else {\n      if (isString(el)) {\n        this.$el = document.querySelector(el)\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * 获取 DOM 元素（type 事件类型）事件绑定信息\n   * ========================================================================\n   * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\n   * ========================================================================\n   * @method getListeners\n   * @param {String} [type] - （可选）事件类型\n   * @returns {Array} - 已绑定的事件信息\n   */\n  getListeners(type) {\n    return getListeners(this.$el, type)\n  }\n\n  /**\n   * 返回已绑定的事件类型的数组（去除名称重复的事件）\n   * ========================================================================\n   * @method getTypes\n   * @since 1.5.0\n   * @returns {Array}\n   */\n  getTypes() {\n    return getTypes(this.$el)\n  }\n\n  /**\n   * 判断是否已经（指定类型的）绑定事件\n   * ========================================================================\n   * @method hasEvent\n   * @since 1.4.0\n   * @param {String} [type] - （可选）事件名称：\n   *                           指定 type，则判断是否绑定 type 类型事件；\n   *                           未指定 type，则判断是否绑定任意类型的事件；\n   * @returns {Boolean}\n   */\n  hasEvent(type) {\n    return hasEvent(this.$el, type)\n  }\n\n  /**\n   * 获取事件触发时的 pageX 值\n   * ========================================================================\n   * @method getPageX\n   * @see getPageX\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件触发时的 pageX 值\n   */\n  getPageX(evt) {\n    return getPageX(evt)\n  }\n\n  /**\n   * 获取事件触发时的 pageY 值\n   * ========================================================================\n   * @method getPageY\n   * @see getPageY\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件触发时的 pageY 值\n   */\n  getPageY(evt) {\n    return getPageY(evt)\n  }\n\n  /**\n   * 获取事件触发时的 pageX 和 pageY 数组数据\n   * ========================================================================\n   * @method getPageXY\n   * @see getPageXY\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Array} - 返回事件触发时的数组数据：[pageX, pageY]\n   */\n  getPageXY(evt) {\n    return getPageXY(evt)\n  }\n\n  /**\n   * 返回触发事件的 charCode\n   * ========================================================================\n   * @method getCharCode\n   * @see getCharCode\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件的 charCode\n   */\n  getCharCode(evt) {\n    return getCharCode(evt)\n  }\n\n  /**\n   * 返回触发（鼠标）事件的 relatedTarget DOM 元素。\n   * ========================================================================\n   * MouseEvent.relatedTarget 只读属性是鼠标事件的次要目标（如果有）。相关的鼠标事件：\n   * mouseenter\n   * mouseleave\n   * mouseover\n   * mouseout\n   * dragenter\n   * dragleave\n   * ========================================================================\n   * @method getRelatedTarget\n   * @since 1.1.0\n   * @see https://developer.mozilla.org/en-US/docs/web/api/mouseevent/relatedtarget\n   * @param {Event} evt - Event 对象\n   * @return {HTMLElement} - Event 对象的 relatedTarget DOM 元素\n   */\n  getRelatedTarget(evt) {\n    return getRelatedTarget(evt)\n  }\n\n  /**\n   * 返回触发事件的 target DOM 元素\n   * ========================================================================\n   * @method getTarget\n   * @since 1.1.0\n   * @param {Event} evt - Event 对象\n   * @return {HTMLElement} - Event 对象的 target DOM 元素\n   */\n  getTarget(evt) {\n    return getTarget(evt)\n  }\n\n  /**\n   * 销毁（type 类型的）代理事件绑定\n   * ========================================================================\n   * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\n   * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\n   * ========================================================================\n   * @method purge\n   * @param {String} type  - （必须）事件类型\n   * @param {Boolean} [recurse]  - （可选）是否递归销毁子节点所有事件绑定\n   * 元素绑定的全部事件处理器\n   * @returns {Emitter} - Emitter 对象\n   */\n  purge(type, recurse = false) {\n    purgeElement(this.$el, type, recurse)\n\n    return this\n  }\n\n  /**\n   * 销毁所有已绑定的代理事件\n   * ========================================================================\n   * @method destroy\n   * @returns {Emitter} - Emitter 对象\n   */\n  destroy() {\n    destroy(this.$el)\n\n    return this\n  }\n\n  /**\n   * 创建自定义事件（CustomerEvent）\n   * ========================================================================\n   * @method createEvent\n   * @since 1.8.0\n   * @see createEvent\n   * @param {String} type - （必须）事件类型（名称）\n   * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\n   * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\n   * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\n   * @returns {CustomEvent} - CustomerEvent 实例\n   */\n  createEvent(type, detail = null, bubbles = true, cancelable = true) {\n    return createEvent(type, detail, bubbles, cancelable)\n  }\n\n  /**\n   * 取消 type 类型的代理事件绑定\n   * ========================================================================\n   * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n   * ========================================================================\n   * @method off\n   * @param {String} type - （必须）事件类型\n   * @param {Function} [handler] - （可选）事件处理器回调函数\n   * @returns {Emitter} - Emitter 对象\n   */\n  off(type, handler) {\n    off(this.$el, type, handler)\n\n    return this\n  }\n\n  /**\n   * 绑定代理事件\n   * ========================================================================\n   * @method on\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {String} type - （必须）事件类型\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向：\n   * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象；\n   * 如未指定 context，则事件处理器回调函数的 this 上下文指向为 Emitter 对象；\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  on(selector, type, handler, data, context, once = false) {\n    on(this.$el, selector, type, handler, data, context || this, once)\n\n    return this\n  }\n\n  /**\n   * 绑定仅触发一次的代理事件\n   * ========================================================================\n   * @method once\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {String} type - （必须）事件类型\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @returns {Emitter} - Emitter 对象\n   */\n  once(selector, type, handler, data, context) {\n    once(this.$el, selector, type, handler, data, context)\n\n    return this\n  }\n\n  /**\n   * 绑定 click 代理事件\n   * ========================================================================\n   * @method click\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/click_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  click(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'click', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dbclick 代理事件\n   * ========================================================================\n   * @method dbclick\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/dblclick_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dbclick(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dbclick', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseenter 代理事件\n   * ========================================================================\n   * @method mouseenter\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseenter(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseenter', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseleave 代理事件\n   * ========================================================================\n   * @method mouseleave\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseleave(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseleave', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mousedown 代理事件\n   * ========================================================================\n   * @method mousedown\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mousedown(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mousedown', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseup 代理事件\n   * ========================================================================\n   * @method mouseup\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseup(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseup', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseover 代理事件\n   * ========================================================================\n   * @method mouseover\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseover(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseover', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mousemove 代理事件\n   * ========================================================================\n   * @method mousemove\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mousemove(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mousemove', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseout 代理事件\n   * ========================================================================\n   * @method mouseout\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseout(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseout', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 drag 代理事件\n   * ========================================================================\n   * @method drag\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/drag_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  drag(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'drag', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragend 代理事件\n   * ========================================================================\n   * @method dragend\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragend_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragend(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragend', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragenter 代理事件\n   * ========================================================================\n   * @method dragenter\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragenter_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragenter(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragenter', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragleave 代理事件\n   * ========================================================================\n   * @method dragleave\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragleave_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragleave(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragleave', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragover 代理事件\n   * ========================================================================\n   * @method dragover\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragover_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragover(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragover', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragstart 代理事件\n   * ========================================================================\n   * @method dragstart\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragstart_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragstart(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragstart', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 drop 代理事件\n   * ========================================================================\n   * @method drop\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/drop_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  drop(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'drop', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 wheel 代理事件\n   * ========================================================================\n   * @method wheel\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  wheel(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'wheel', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 contextmenu 代理事件\n   * ========================================================================\n   * @method contextmenu\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  contextmenu(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'contextmenu', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 focusin 或者 focus 代理事件\n   * ========================================================================\n   * @method focusin\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/focus_event\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  focusin(selector, handler, data, context, once = false) {\n    focusin(this.$el, selector, handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 focusout 或者 blur 代理事件\n   * ========================================================================\n   * @method focusout\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  focusout(selector, handler, data, context, once = false) {\n    focusout(this.$el, selector, handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 change 代理事件\n   * ========================================================================\n   * @method change\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/change_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  change(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'change', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 input 代理事件\n   * ========================================================================\n   * @method input\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  input(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'input', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionstart 代理事件\n   * ========================================================================\n   * @method compositionstart\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionstart(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionstart', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionupdate 代理事件\n   * ========================================================================\n   * @method compositionupdate\n   * @since 1.7.0\n   * @see  https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionupdate_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionupdate(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionupdate', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionend 代理事件\n   * ========================================================================\n   * @method compositionend\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionend(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionend', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 paste 代理事件\n   * ========================================================================\n   * @method paste\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/paste_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  paste(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'paste', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 copy 代理事件\n   * ========================================================================\n   * @method copy\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/copy_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  copy(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'copy', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 cut 代理事件\n   * ========================================================================\n   * @method cut\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/cut_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  cut(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'cut', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 keydown 代理事件\n   * ========================================================================\n   * @method keydown\n   * @since 1.7.0\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  keydown(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'keydown', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 keyup 代理事件\n   * ========================================================================\n   * @method keyup\n   * @since 1.7.0\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  keyup(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'keyup', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 error 代理事件\n   * ========================================================================\n   * @method error\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/error_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  error(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'error', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 触发代理自定义事件\n   * ========================================================================\n   * @method trigger\n   * @since 1.6.0\n   * @param {String} type - （必须）事件类型\n   * @param {String} selector - （必须）选择器\n   * @returns {Emitter} - Emitter 对象\n   */\n  trigger(type, selector) {\n    trigger(this.$el, type, selector)\n\n    return this\n  }\n\n  /**\n   * 阻止事件的默认行为\n   * ========================================================================\n   * @method preventDefault\n   * @see preventDefault\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  preventDefault(evt) {\n    preventDefault(evt)\n\n    return this\n  }\n\n  /**\n   * 终止事件在传播过程的捕获或冒泡的事件流\n   * ========================================================================\n   * @method stopPropagation\n   * @see stopPropagation\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  stopPropagation(evt) {\n    stopPropagation(evt)\n\n    return this\n  }\n\n  /**\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\n   * ========================================================================\n   * @method stopEvent\n   * @see stopEvent\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  stopEvent(evt) {\n    stopEvent(evt)\n\n    return this\n  }\n\n  /**\n   * 阻止监听同一事件的其他事件监听器被调用，并且阻止默认行为和事件冒泡。\n   * ========================================================================\n   * @method stopImmediate\n   * @since 1.8.0\n   * @see stopImmediate\n   * @param {Event} evt - （必须）Event 对象\n   */\n  stopImmediate(evt) {\n    stopImmediate(evt)\n\n    return this\n  }\n}\n\nexport default Emitter\n","import isString from './isString'\nimport getTypes from './getTypes'\n\n/**\n * 判断是否已经（指定类型的）绑定事件\n * ========================================================================\n * @method hasEvent\n * @param {HTMLElement} el - 要检测是否绑定事件的 DOM 元素\n * @param {String} [type] - （可选）事件名称：\n *                           指定 type，则判断是否绑定 type 类型事件；\n *                           未指定 type，则判断是否绑定任意类型的事件；\n * @returns {Boolean}\n */\nconst hasEvent = (el, type) => {\n  const types = getTypes(el)\n  let result\n\n  if (types.length < 1) {\n    return false\n  }\n\n  result = types.length > 0\n\n  /* istanbul ignore else */\n  if (type && isString(type)) {\n    result = types.indexOf(type) > -1\n  }\n\n  return result\n}\n\nexport default hasEvent\n","import getPageX from './getPageX'\nimport getPageY from './getPageY'\n\n/**\n * 获取事件触发时的 pageX 和 pageY 数组数据\n * ========================================================================\n * @method getPageXY\n * @param {Event} evt - （必须）Event 对象\n * @return {Array} - 返回事件触发时的数组数据：[pageX, pageY]\n */\nconst getPageXY = function (evt) {\n  return [getPageX(evt), getPageY(evt)]\n}\n\nexport default getPageXY\n","import resolveTextNode from './resolveTextNode'\n\n/**\n * 返回触发（鼠标）事件的 relatedTarget DOM 元素。\n * ========================================================================\n * MouseEvent.relatedTarget 只读属性是鼠标事件的次要目标（如果有）。相关的鼠标事件：\n * mouseenter\n * mouseleave\n * mouseover\n * mouseout\n * dragenter\n * dragleave\n * ========================================================================\n * @method getRelatedTarget\n * @see https://developer.mozilla.org/en-US/docs/web/api/mouseevent/relatedtarget\n * @param {Event} evt - Event 对象\n * @return {HTMLElement} - Event 对象的 relatedTarget DOM 元素\n */\nconst getRelatedTarget = function (evt) {\n  let target = evt.relatedTarget\n  const type = evt.type\n\n  if (!target) {\n    if (type === 'mouseout') {\n      target = evt.toElement\n    } else if (type === 'mouseover') {\n      target = evt.fromElement\n    }\n  }\n\n  return resolveTextNode(target)\n}\n\nexport default getRelatedTarget\n","import getTypes from './getTypes'\nimport purgeElement from './purgeElement'\n\n/**\n * 销毁所有已绑定的代理事件\n * ========================================================================\n * @method destroy\n * @param {HTMLElement} el - 需要解除所有事件绑定的 DOM 元素\n * @returns {Emitter} - Emitter 对象\n */\nconst destroy = (el) => {\n  const types = getTypes(el)\n\n  types.forEach((type) => {\n    purgeElement(el, type, true)\n  })\n}\n\nexport default destroy\n","import on from './on'\n\n/**\n * 绑定只触发一次的事件\n * ========================================================================\n * @method once\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {String} type - （必须）事件类型\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} data - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} context - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n */\nconst once = (el, selector, type, fn, data, context) => {\n  on(el, selector, type, fn, data, context, true)\n}\n\nexport default once\n","import isIE from './isIE'\nimport on from './on'\n\n/**\n * 绑定 focusin 或者 focus 代理事件\n * ========================================================================\n * @method focusin\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/focus_event\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} [once] - （可选）是否仅触发一次\n */\nconst focusin = function (el, selector, fn, data, context, once = false) {\n  const FOCUSIN = isIE() ? 'focusin' : 'focus'\n\n  return on(el, selector, FOCUSIN, fn, data, context, once)\n}\n\nexport default focusin\n","import isIE from './isIE'\nimport on from './on'\n\n/**\n * 绑定 focusout 或者 blur 代理事件\n * ========================================================================\n * @method focusout\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} [once] - （可选）是否仅触发一次\n */\nconst focusout = function (el, selector, fn, data, context, once = false) {\n  const FOCUSOUT = isIE() ? 'focusout' : 'blur'\n\n  on(el, selector, FOCUSOUT, fn, data, context, once)\n}\n\nexport default focusout\n","import createEvent from './createEvent'\n\n/**\n * 触发代理自定义事件\n * ========================================================================\n * trigger() 方法也可以用来手动触发内置的事件，例如 click, mouseenter 等事件，通常\n * 使用 trigger() 来手动触发用户自定义事件。\n *\n * 另外，选择器 selector 的匹配使用 document.querySelector() 方法，因此仅事件触发一次。\n * ========================================================================\n * @method trigger\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {String} selector - （必须）选择器\n *\n * @example\n * const $list = document.querySelector('#list')\n * // 绑定 alert 自定义事件\n * on($list, '.item', 'alert', itemHandler)\n * on($list, '.remove', 'alert', removeHandler)\n *\n * // 触发 $list 下匹配 '.item' 元素手动触发 alert 自定义事件\n * trigger('alert', '.item')\n *\n * // 可以使用伪类选择器，更精确的匹配元素\n * trigger('alert', '.item:last-child')\n *\n * // 触发 $list 下匹配 '.remove' 元素手动触发 alert 自定义事件\n * trigger('alert', '.remove')\n * trigger('alert', '.remove:nth-child(2)')\n */\nconst trigger = (el, type, selector) => {\n  let $child\n\n  if (!type || !selector) {\n    return false\n  }\n\n  $child = el.querySelector(selector)\n\n  if (!$child) {\n    return false\n  }\n\n  $child.dispatchEvent(createEvent(type))\n}\n\nexport default trigger\n","import stopEvent from './stopEvent'\n\n/**\n * 阻止监听同一事件的其他事件监听器被调用，并且阻止默认行为和事件冒泡。\n * ========================================================================\n * @method stopImmediate\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation\n * @param {Event} evt - （必须）Event 对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('#service')\n * const logHandler = function(evt) {\n *   console.log(evt.target)\n * }\n * const styleHandler = function(evt) {\n *   $nav.classList.add('checked')\n * }\n * const serviceHandler = function(evt) {\n *   alert(evt.target)\n *   stopImmediate(evt)\n * }\n * const removeHandler = function(evt) {\n *   const $target = evt.target\n *\n *   $target.parentNode.removeChild($target)\n * }\n *\n * $nav.addEventListener('click', logHandler)\n * $nav.addEventListener('click', styleHandler)\n * $service.addEventListener('click', serviceHandler)\n * $service.addEventListener('click', removeHandler)\n *\n * $nav.click()\n * // => 触发 logHandler 和 styleHandler\n *\n * $service.click()\n * // => 仅触发 serviceHandler，不会触发 removeHandler\n * // => 并且不会跳转页面，也不会冒泡到 $nav，不会触发 logHandler 和 styleHandler\n */\nconst stopImmediate = function (evt) {\n  stopEvent(evt)\n  evt.stopImmediatePropagation()\n}\n\nexport default stopImmediate\n","import Emitter from './emitter'\n\nconst delegate = (el) => {\n  return new Emitter(el)\n}\n\nexport default delegate\n","import delegate from '@yaohaixiao/delegate.js/delegate'\nimport $observer from '../../subscribers.core'\n\nconst $aside = document.querySelector('#aside')\nlet $active = null\n\nconst onAnchorTrigger = function (evt) {\n  const $target = evt.delegateTarget\n  const id = $target.href.split('#')[1]\n\n  $observer.emit('scroll:to:method', id)\n\n  evt.stopPropagation()\n  evt.preventDefault()\n}\n\nconst onAsyncAnchor = (id) => {\n  const $anchor = document.querySelector(\n    `.aside__anchor[href=\"#${id}\"]`\n  )\n  const $item = $anchor.parentNode\n\n  if ($active) {\n    $active.classList.remove('active')\n  }\n\n  $item.classList.add('active')\n  $active = $item\n}\n\nconst setup = () => {\n  const $emitter = delegate($aside)\n\n  $observer.on('sync:anchor', onAsyncAnchor)\n  $emitter.click('.aside__anchor', onAnchorTrigger)\n}\n\nexport default {\n  setup\n}\n","import delegate from '@yaohaixiao/delegate.js/delegate'\nimport $observer from '../../subscribers.core'\n\nconst $buttons = document.querySelector('#buttons')\n\nconst toggle = (top) => {\n  const $main = document.querySelector('#main')\n  const MIN = 0\n  const MAX = $main.scrollHeight\n  const $up = $buttons.querySelector('.up')\n  const $down = $buttons.querySelector('.down')\n\n  if (top <= MIN) {\n    $up.classList.add('hide')\n    $down.classList.remove('hide')\n  } else if (top >= MAX) {\n    $down.classList.add('hide')\n    $up.classList.remove('hide')\n  } else if (top > MIN && top < MAX) {\n    $up.classList.remove('hide')\n    $down.classList.remove('hide')\n  }\n}\n\nconst setup = () => {\n  const $emitter = delegate($buttons)\n\n  toggle(0)\n\n  $observer.on('buttons:toggle', toggle)\n\n  $emitter.click('.up', () => {\n    $observer.emit('scroll:to:top', 50)\n  })\n  $emitter.click('.down', () => {\n    $observer.emit('scroll:to:bottom', 50)\n  })\n}\n\nexport default {\n  setup\n}\n","import scroller from './scroller'\nimport anchors from './anchors'\nimport buttons from './buttons'\n\nscroller.setup()\nanchors.setup()\nbuttons.setup()\n"],"names":["_subscribers","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","_hasDirectSubscribersFor","topic","length","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","data","async","execute","forEach","subscriber","message","val","toString","indexOf","isTypedArray","callback","context","deliver","setTimeout","guid","id","prefix","on","handler","token","subject","apply","push","_removeSubscriber","off","keys","execution","j","splice","_removeSubscriberByToken","subscribers","this","$main","document","querySelector","MAX","scrollHeight","timer","playing","scrollTo","top","speed","scrollTop","distance","step","Math","ceil","scroll","clearTimeout","$observer","onScrollToTop","onScrollToBottom","onScrollToMethod","method","$method","offsetTop","scroller","Observer","IntersectionObserver","entries","entry","intersectionRatio","target","getAttribute","root","rootMargin","querySelectorAll","section","observe","sync","createEvent","type","detail","bubbles","cancelable","CustomEvent","isString","isElement","el","nodeName","tagName","nodeType","getListeners","listeners","_listeners","filter","listener","CAPTURE_EVENTS","_off","fn","capture","_delegateListener","index","i","_delete","removeEventListener","purgeElement","recurse","$element","$children","childNodes","arguments","$child","isFunction","_typeof","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","resolveTextNode","getTarget","evt","once","delegateTarget","ctx","includeCTX","closest","overrideContext","addEventListener","isIE","agent","navigator","userAgent","match","getTypes","types","Set","getScroll","$body","documentElement","body","scrollXY","scrollLeft","getPageX","x","pageX","clientX","getPageY","y","pageY","clientY","getCharCode","code","keyCode","charCode","webkitKeymap","UA","test","isAppleSafari","preventDefault","stopPropagation","stopEvent","Emitter","constructor","$el","hasEvent","result","getPageXY","getRelatedTarget","relatedTarget","toElement","fromElement","purge","destroy","click","dbclick","mouseenter","mouseleave","mousedown","mouseup","mouseover","mousemove","mouseout","drag","dragend","dragenter","dragleave","dragover","dragstart","drop","wheel","contextmenu","focusin","FOCUSIN","focusout","FOCUSOUT","change","input","compositionstart","compositionupdate","compositionend","paste","copy","cut","keydown","keyup","error","trigger","dispatchEvent","stopImmediate","stopImmediatePropagation","delegate","$aside","$active","onAnchorTrigger","href","split","onAsyncAnchor","$item","classList","remove","add","anchors","$emitter","$buttons","toggle","$up","$down","buttons"],"mappings":"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","x_google_ignoreList":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]}