{"version":3,"file":"subscribers.core.min.js","sources":["_subscribers.js","utils/hasOwn.js","_hasDirectSubscribersFor.js","has.js","_hasSubscribers.js","utils/guid.js","on.js","utils/isFunction.js","_removeSubscriber.js","off.js","_removeSubscriberByToken.js","subscribers.core.js","emit.js"],"sourcesContent":["/**\n * 存储订阅者（主题和处理器的）私有对象\n * ========================================================================\n * @type {{}}\n * @private\n */\nconst _subscribers = {}\n\nexport default _subscribers\n","/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n  return obj && hasOwnProperty.call(obj, prop)\n}\n\nexport default hasOwn\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\n\n/**\n * 判断是否存在特定 topic 指定的订阅者信息\n * ========================================================================\n * @method _hasDirectSubscribersFor\n * @param {String} topic - （必须）主题名称\n * @returns {Boolean}\n */\nconst _hasDirectSubscribersFor = (topic) => {\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\n}\n\nexport default _hasDirectSubscribersFor\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\nimport _hasSubscribers from './_hasSubscribers'\n\n/**\n * 判断是否存在包含 topic 指定的订阅者信息\n * ========================================================================\n * @method has\n * @param {String} topic - （必须）主题名称\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\n * @returns {Boolean}\n */\nconst has = (topic, isDirect = true) => {\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\n}\n\nexport default has\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\n\n/**\n * 判断是否存在包含 topic 指定的订阅者信息\n * ========================================================================\n * @method _hasSubscribers\n * @param {String} topic - （必须）主题名称\n * @returns {Boolean}\n */\nconst _hasSubscribers = (topic) => {\n  let found = _hasDirectSubscribersFor(topic)\n  let position = topic.lastIndexOf('.')\n\n  while (!found && position !== -1) {\n    topic = topic.substring(0, position)\n    position = topic.lastIndexOf('.')\n    found = _hasDirectSubscribersFor(topic)\n  }\n\n  return found\n}\n\nexport default _hasSubscribers\n","/**\n * 生成唯一 id 字符串的函数\n * ========================================================================\n * @method guid\n * @param {String} [prefix] - 生成 id 的前缀字符串\n * @return {String} 返回一个\n */\nconst guid = (() => {\n  let id = 0\n\n  return (prefix = 'guid-') => {\n    id += 1\n\n    return `${prefix + id}`\n  }\n})()\n\nexport default guid\n","import _subscribers from './_subscribers'\nimport isFunction from './utils/isFunction'\nimport guid from './utils/guid'\n\n/**\n * 订阅主题，并给出处理器函数\n * ========================================================================\n * @method on\n * @param {String} topic - （必须）主题名称\n * @param {Function} handler - （必须）主题的处理器函数\n * @return {String|Boolean} - 唯一的 token 字符串，例如：'guid-1'。\n */\nconst on = (topic, handler) => {\n  const token = guid()\n\n  if (!isFunction(handler)) {\n    return false\n  }\n\n  /* istanbul ignore else */\n  if (!_subscribers[topic]) {\n    _subscribers[topic] = []\n  }\n\n  _subscribers[topic].push({\n    topic,\n    callback: handler,\n    token\n  })\n\n  return token\n}\n\nexport default on\n","/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return Object.prototype.toString.apply(val) === '[object Function]'\n}\n\nexport default isFunction\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\n\n/**\n * 删除特定 topic 主题的订阅者信息\n * ========================================================================\n * @method _removeSubscriber\n * @param {String} topic - （必须）主题名称\n * @returns {Boolean}\n */\nconst _removeSubscriber = (topic) => {\n  if (!hasOwn(_subscribers, topic)) {\n    return false\n  }\n\n  delete _subscribers[topic]\n}\n\nexport default _removeSubscriber\n","import has from './has'\nimport _removeSubscriber from './_removeSubscriber'\nimport _removeSubscriberByToken from './_removeSubscriberByToken'\n\n/**\n * 取消订阅主题\n * ========================================================================\n * @method off\n * @param {String} topic - （必须）订阅的主题\n * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\n */\nconst off = (topic, token) => {\n  if (!has(topic)) {\n    return false\n  }\n\n  if (token) {\n    _removeSubscriberByToken(token)\n  } else {\n    _removeSubscriber(topic)\n  }\n}\n\nexport default off\n","import _subscribers from './_subscribers'\nimport _removeSubscriber from './_removeSubscriber'\n\nconst _removeSubscriberByToken = (token) => {\n  const keys = Object.keys(_subscribers)\n  let index = -1\n\n  if (!token || keys.length < 1) {\n    return false\n  }\n\n  keys.forEach((prop) => {\n    const subscriber = _subscribers[prop]\n    let topic\n    subscriber.forEach((subject, j) => {\n      if (subject.callback === token || subject.token === token) {\n        topic = subject.topic\n        subscriber.splice(index, j)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (subscriber.length < 1) {\n      _removeSubscriber(topic)\n    }\n  })\n}\n\nexport default _removeSubscriberByToken\n","import emit from './emit'\nimport on from './on'\nimport off from './off'\n\nconst subscribers = {\n  on(topic, handler) {\n    return on(topic, handler)\n  },\n\n  emit(topic, data, async = true) {\n    emit(topic, data, async)\n\n    return this\n  },\n\n  off(topic, token) {\n    off(topic, token)\n\n    return this\n  }\n}\n\nexport default subscribers\n","import _subscribers from './_subscribers'\nimport has from './has'\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\n\n/**\n * （异步）发布订阅主题信息\n * ========================================================================\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\n * ========================================================================\n * @method emit\n * @param {String} topic - （必须）主题名称\n * @param {Object} data - （必须）数据对象\n * @param {Boolean} async - (可选) 是否异步发布\n */\nconst emit = (topic, data, async = true) => {\n  const execute = (topic) => {\n    if (!_hasDirectSubscribersFor(topic)) {\n      return false\n    }\n\n    _subscribers[topic].forEach((subscriber) => {\n      subscriber.callback(data)\n    })\n  }\n  const deliver = () => {\n    let subscriber = topic\n    let position = topic.lastIndexOf('.')\n\n    while (position !== -1) {\n      subscriber = subscriber.substring(0, position)\n      position = subscriber.lastIndexOf('.')\n\n      execute(subscriber)\n    }\n\n    execute(topic)\n  }\n\n  if (!has(topic)) {\n    return false\n  }\n\n  if (async) {\n    setTimeout(deliver, 10)\n  } else {\n    deliver()\n  }\n}\n\nexport default emit\n"],"names":["_subscribers","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","_hasDirectSubscribersFor","topic","length","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","guid","id","prefix","on","handler","token","val","toString","apply","push","callback","_removeSubscriber","off","keys","forEach","subscriber","subject","j","splice","_removeSubscriberByToken","emit","data","async","execute","deliver","setTimeout","this"],"mappings":"4OAMA,MAAMA,EAAe,CAAA,ECEfC,EAAS,CAACC,EAAKC,KACnB,MAAMC,EAAiBC,OAAOC,UAAUF,eACxC,OAAOF,GAAOE,EAAeG,KAAKL,EAAKC,EAAI,ECAvCK,EAA4BC,GACzBR,EAAOD,EAAcS,IAAUT,EAAaS,GAAOC,OAAS,ECA/DC,EAAM,CAACF,EAAOG,GAAW,IACtBA,EAAWJ,EAAyBC,GCHrB,CAACA,IACvB,IAAII,EAAQL,EAAyBC,GACjCK,EAAWL,EAAMM,YAAY,KAEjC,MAAQF,IAAuB,IAAdC,GAEfA,GADAL,EAAQA,EAAMO,UAAU,EAAGF,IACVC,YAAY,KAC7BF,EAAQL,EAAyBC,GAGnC,OAAOI,GDP6CI,CAAgBR,GELhES,EAAO,MACX,IAAIC,EAAK,EAET,MAAO,CAACC,EAAS,WACfD,GAAM,EAEC,GAAGC,EAASD,IAEtB,EARY,GCKPE,EAAK,CAACZ,EAAOa,KACjB,MAAMC,EAAQL,IAEd,OCRkBM,EDQFF,ECPgC,sBAAzCjB,OAAOC,UAAUmB,SAASC,MAAMF,KDYlCxB,EAAaS,KAChBT,EAAaS,GAAS,IAGxBT,EAAaS,GAAOkB,KAAK,CACvBlB,QACAmB,SAAUN,EACVC,UAGKA,GCvBU,IAACC,CDuBXD,EEpBHM,EAAqBpB,IACzB,IAAKR,EAAOD,EAAcS,GACxB,OAAO,SAGFT,EAAaS,EAAM,ECJtBqB,EAAM,CAACrB,EAAOc,KAClB,IAAKZ,EAAIF,GACP,OAAO,EAGLc,ECb2B,CAACA,IAChC,MAAMQ,EAAO1B,OAAO0B,KAAK/B,GAGzB,IAAKuB,GAASQ,EAAKrB,OAAS,EAC1B,OAAO,EAGTqB,EAAKC,SAAS7B,IACZ,MAAM8B,EAAajC,EAAaG,GAChC,IAAIM,EACJwB,EAAWD,SAAQ,CAACE,EAASC,KACvBD,EAAQN,WAAaL,GAASW,EAAQX,QAAUA,IAClDd,EAAQyB,EAAQzB,MAChBwB,EAAWG,QAZL,EAYmBD,GAC1B,IAICF,EAAWvB,OAAS,GACtBmB,EAAkBpB,EACnB,GACD,EDRA4B,CAAyBd,GAEzBM,EAAkBpB,EACnB,QEhBiB,CAClBY,GAAE,CAACZ,EAAOa,IACDD,EAAGZ,EAAOa,GAGnBgB,KAAK7B,EAAO8B,EAAMC,GAAQ,GAGxB,MCES,EAAC/B,EAAO8B,EAAMC,GAAQ,KACjC,MAAMC,EAAWhC,IACf,IAAKD,EAAyBC,GAC5B,OAAO,EAGTT,EAAaS,GAAOuB,SAASC,IAC3BA,EAAWL,SAASW,EAAK,GACzB,EAEEG,EAAU,KACd,IAAIT,EAAaxB,EACbK,EAAWL,EAAMM,YAAY,KAEjC,MAAqB,IAAdD,GACLmB,EAAaA,EAAWjB,UAAU,EAAGF,GACrCA,EAAWmB,EAAWlB,YAAY,KAElC0B,EAAQR,GAGVQ,EAAQhC,EAAM,EAGhB,IAAKE,EAAIF,GACP,OAAO,EAGL+B,EACFG,WAAWD,EAAS,IAEpBA,GACD,EDpCCJ,CAAK7B,EAAO8B,EAAMC,GAEXI,IACR,EAEDd,IAAIrB,EAAOc,GAGT,OAFAO,EAAIrB,EAAOc,GAEJqB,IACR"}